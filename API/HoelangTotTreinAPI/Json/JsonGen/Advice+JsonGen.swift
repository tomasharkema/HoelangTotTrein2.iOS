//
//  Advice+JsonGen.swift
//
//  Auto generated by swift-json-gen on Sat, 08 Apr 2017 11:00:40 GMT
//  See for details: https://github.com/tomlokhorst/swift-json-gen
//

import Foundation
import Statham

extension FareStatus {
  public static func decodeJson(_ json: Any) throws -> FareStatus {
    guard let rawValue = json as? String else {
      throw JsonDecodeError.wrongType(rawValue: json, expectedType: "String")
    }
    guard let value = FareStatus(rawValue: rawValue) else {
      throw JsonDecodeError.wrongEnumRawValue(rawValue: rawValue, enumType: "FareStatus")
    }

    return value
  }

  public func encodeJson() -> String {
    return rawValue
  }
}

extension FareTime {
  public static func decodeJson(_ json: Any) throws -> FareTime {
    let decoder = try JsonDecoder(json: json)

    let _planned = try decoder.decode("planned", decoder: Double.decodeJson)
    let _actual = try decoder.decode("actual", decoder: Double.decodeJson)

    guard
      let planned = _planned,
      let actual = _actual
    else {
      throw JsonDecodeError.structErrors(type: "FareTime", errors: decoder.errors)
    }

    return FareTime(planned: planned, actual: actual)
  }

  public func encodeJson() -> [String: Any] {
    var dict: [String: Any] = [:]

    dict["planned"] = planned.encodeJson()
    dict["actual"] = actual.encodeJson()

    return dict
  }
}

extension Melding {
  public static func decodeJson(_ json: Any) throws -> Melding {
    let decoder = try JsonDecoder(json: json)

    let _id = try decoder.decode("id", decoder: String.decodeJson)
    let _ernstig = try decoder.decode("ernstig", decoder: Bool.decodeJson)
    let _text = try decoder.decode("text", decoder: String.decodeJson)

    guard
      let id = _id,
      let ernstig = _ernstig,
      let text = _text
    else {
      throw JsonDecodeError.structErrors(type: "Melding", errors: decoder.errors)
    }

    return Melding(id: id, ernstig: ernstig, text: text)
  }

  public func encodeJson() -> [String: Any] {
    var dict: [String: Any] = [:]

    dict["id"] = id.encodeJson()
    dict["ernstig"] = ernstig.encodeJson()
    dict["text"] = text.encodeJson()

    return dict
  }
}

extension Stop {
  public static func decodeJson(_ json: Any) throws -> Stop {
    let decoder = try JsonDecoder(json: json)

    let _time = try decoder.decode("time", decoder: Double.decodeJson)
    let _spoor = try decoder.decode("spoor", decoder: Optional.decodeJson(String.decodeJson))
    let _name = try decoder.decode("name", decoder: String.decodeJson)

    guard
      let time = _time,
      let spoor = _spoor,
      let name = _name
    else {
      throw JsonDecodeError.structErrors(type: "Stop", errors: decoder.errors)
    }

    return Stop(time: time, spoor: spoor, name: name)
  }

  public func encodeJson() -> [String: Any] {
    var dict: [String: Any] = [:]

    dict["time"] = time.encodeJson()
    dict["spoor"] = spoor.encodeJson({ $0.encodeJson() })
    dict["name"] = name.encodeJson()

    return dict
  }
}

extension ReisDeel {
  public static func decodeJson(_ json: Any) throws -> ReisDeel {
    let decoder = try JsonDecoder(json: json)

    let _vervoerder = try decoder.decode("vervoerder", decoder: String.decodeJson)
    let _vervoerType = try decoder.decode("vervoerType", decoder: String.decodeJson)
    let _stops = try decoder.decode("stops", decoder: Array.decodeJson(Stop.decodeJson))

    guard
      let vervoerder = _vervoerder,
      let vervoerType = _vervoerType,
      let stops = _stops
    else {
      throw JsonDecodeError.structErrors(type: "ReisDeel", errors: decoder.errors)
    }

    return ReisDeel(vervoerder: vervoerder, vervoerType: vervoerType, stops: stops)
  }

  public func encodeJson() -> [String: Any] {
    var dict: [String: Any] = [:]

    dict["vervoerder"] = vervoerder.encodeJson()
    dict["vervoerType"] = vervoerType.encodeJson()
    dict["stops"] = stops.encodeJson({ $0.encodeJson() })

    return dict
  }
}

extension AdviceRequestCodes {
  public static func decodeJson(_ json: Any) throws -> AdviceRequestCodes {
    let decoder = try JsonDecoder(json: json)

    let _from = try decoder.decode("from", decoder: String.decodeJson)
    let _to = try decoder.decode("to", decoder: String.decodeJson)

    guard
      let from = _from,
      let to = _to
    else {
      throw JsonDecodeError.structErrors(type: "AdviceRequestCodes", errors: decoder.errors)
    }

    return AdviceRequestCodes(from: from, to: to)
  }

  public func encodeJson() -> [String: Any] {
    var dict: [String: Any] = [:]

    dict["from"] = from.encodeJson()
    dict["to"] = to.encodeJson()

    return dict
  }
}

extension Advice {
  public static func decodeJson(_ json: Any) throws -> Advice {
    let decoder = try JsonDecoder(json: json)

    let _overstappen = try decoder.decode("overstappen", decoder: Int.decodeJson)
    let _vertrek = try decoder.decode("vertrek", decoder: FareTime.decodeJson)
    let _aankomst = try decoder.decode("aankomst", decoder: FareTime.decodeJson)
    let _melding = try decoder.decode("melding", decoder: Optional.decodeJson(Melding.decodeJson))
    let _reisDeel = try decoder.decode("reisDeel", decoder: Array.decodeJson(ReisDeel.decodeJson))
    let _vertrekVertraging = try decoder.decode("vertrekVertraging", decoder: Optional.decodeJson(String.decodeJson))
    let _status = try decoder.decode("status", decoder: FareStatus.decodeJson)
    let _request = try decoder.decode("request", decoder: AdviceRequestCodes.decodeJson)

    guard
      let overstappen = _overstappen,
      let vertrek = _vertrek,
      let aankomst = _aankomst,
      let melding = _melding,
      let reisDeel = _reisDeel,
      let vertrekVertraging = _vertrekVertraging,
      let status = _status,
      let request = _request
    else {
      throw JsonDecodeError.structErrors(type: "Advice", errors: decoder.errors)
    }

    return Advice(overstappen: overstappen, vertrek: vertrek, aankomst: aankomst, melding: melding, reisDeel: reisDeel, vertrekVertraging: vertrekVertraging, status: status, request: request)
  }

  public func encodeJson() -> [String: Any] {
    var dict: [String: Any] = [:]

    dict["overstappen"] = overstappen.encodeJson()
    dict["vertrek"] = vertrek.encodeJson()
    dict["aankomst"] = aankomst.encodeJson()
    dict["melding"] = melding.encodeJson({ $0.encodeJson() })
    dict["reisDeel"] = reisDeel.encodeJson({ $0.encodeJson() })
    dict["vertrekVertraging"] = vertrekVertraging.encodeJson({ $0.encodeJson() })
    dict["status"] = status.encodeJson()
    dict["request"] = request.encodeJson()

    return dict
  }
}

extension AdvicesResult {
  public static func decodeJson(_ json: Any) throws -> AdvicesResult {
    let decoder = try JsonDecoder(json: json)

    let _advices = try decoder.decode("advices", decoder: Advices.decodeJson(Advice.decodeJson))

    guard let advices = _advices else {
      throw JsonDecodeError.structErrors(type: "AdvicesResult", errors: decoder.errors)
    }

    return AdvicesResult(advices: advices)
  }

  public func encodeJson() -> [String: Any] {
    var dict: [String: Any] = [:]

    dict["advices"] = advices.encodeJson({ $0.encodeJson() })

    return dict
  }
}

extension AdviceRequest {
  public static func decodeJson(_ json: Any) throws -> AdviceRequest {
    let decoder = try JsonDecoder(json: json)

    let _from = try decoder.decode("from", decoder: Optional.decodeJson(Station.decodeJson))
    let _to = try decoder.decode("to", decoder: Optional.decodeJson(Station.decodeJson))

    guard
      let from = _from,
      let to = _to
    else {
      throw JsonDecodeError.structErrors(type: "AdviceRequest", errors: decoder.errors)
    }

    return AdviceRequest(from: from, to: to)
  }

  public func encodeJson() -> [String: Any] {
    var dict: [String: Any] = [:]

    dict["from"] = from.encodeJson({ $0.encodeJson() })
    dict["to"] = to.encodeJson({ $0.encodeJson() })

    return dict
  }
}

extension AdvicesAndRequest {
  public static func decodeJson(_ json: Any) throws -> AdvicesAndRequest {
    let decoder = try JsonDecoder(json: json)

    let _advices = try decoder.decode("advices", decoder: Advices.decodeJson(Advice.decodeJson))
    let _adviceRequest = try decoder.decode("adviceRequest", decoder: AdviceRequest.decodeJson)

    guard
      let advices = _advices,
      let adviceRequest = _adviceRequest
    else {
      throw JsonDecodeError.structErrors(type: "AdvicesAndRequest", errors: decoder.errors)
    }

    return AdvicesAndRequest(advices: advices, adviceRequest: adviceRequest)
  }

  public func encodeJson() -> [String: Any] {
    var dict: [String: Any] = [:]

    dict["advices"] = advices.encodeJson({ $0.encodeJson() })
    dict["adviceRequest"] = adviceRequest.encodeJson()

    return dict
  }
}
