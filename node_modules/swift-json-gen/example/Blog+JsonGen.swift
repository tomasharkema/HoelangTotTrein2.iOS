//
//  Blog+JsonGen.swift
//
//  Auto generated by swift-json-gen on Tue, 22 Sep 2015 12:33:24 GMT
//  See for details: https://github.com/tomlokhorst/swift-json-gen
//

import Foundation

extension Blog {
  static func decodeJson(json: AnyObject) -> Blog? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary")
      return nil
    }

    guard let id_field: AnyObject = dict["id"] else {
      assertionFailure("field 'id' is missing")
      return nil
    }
    guard let id: Int = Int.decodeJson(id_field) else {
      assertionFailure("field 'id' is not a Int")
      return nil
    }

    guard let name_field: AnyObject = dict["name"] else {
      assertionFailure("field 'name' is missing")
      return nil
    }
    guard let name: String = String.decodeJson(name_field) else {
      assertionFailure("field 'name' is not a String")
      return nil
    }

    let author_field: AnyObject? = dict["author"]
    let author: String? = author_field == nil || author_field! is NSNull ? nil : Optional.decodeJson({ String.decodeJson($0) }, author_field!)

    guard let needsPassword_field: AnyObject = dict["needsPassword"] else {
      assertionFailure("field 'needsPassword' is missing")
      return nil
    }
    guard let needsPassword: Bool = Bool.decodeJson(needsPassword_field) else {
      assertionFailure("field 'needsPassword' is not a Bool")
      return nil
    }

    guard let url_field: AnyObject = dict["url"] else {
      assertionFailure("field 'url' is missing")
      return nil
    }
    guard let url: NSURL = NSURL.decodeJson(url_field) else {
      assertionFailure("field 'url' is not a NSURL")
      return nil
    }

    return Blog(id: id, name: name, author: author, needsPassword: needsPassword, url: url)
  }

  func encodeJson() -> [String: AnyObject] {
    var dict: [String: AnyObject] = [:]

    dict["id"] = id.encodeJson()
    dict["name"] = name.encodeJson()
    dict["author"] = author.encodeJson({ $0.encodeJson() })
    dict["needsPassword"] = needsPassword.encodeJson()
    dict["url"] = url.encodeJson()

    return dict
  }
}
