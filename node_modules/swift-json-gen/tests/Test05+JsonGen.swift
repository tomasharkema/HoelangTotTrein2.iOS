//
//  Test05+JsonGen.swift
//
//  Auto generated by swift-json-gen on Tue, 22 Sep 2015 12:32:49 GMT
//  See for details: https://github.com/tomlokhorst/swift-json-gen
//

import Foundation

extension Test05 {
  static func decodeJson(json: AnyObject) -> Test05? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary")
      return nil
    }

    guard let one_field: AnyObject = dict["one"] else {
      assertionFailure("field 'one' is missing")
      return nil
    }
    let one: AnyObject = one_field

    guard let two_field: AnyObject = dict["two"] else {
      assertionFailure("field 'two' is missing")
      return nil
    }
    guard let two: [String : AnyObject] = two_field as? [String : AnyObject] else {
      assertionFailure("field 'two' is not a [String : AnyObject]")
      return nil
    }

    guard let three_field: AnyObject = dict["three"] else {
      assertionFailure("field 'three' is missing")
      return nil
    }
    guard let three: [AnyObject] = three_field as? [AnyObject] else {
      assertionFailure("field 'three' is not a [AnyObject]")
      return nil
    }

    let four_field: AnyObject? = dict["four"]
    let four: [String : AnyObject]? = four_field == nil || four_field! is NSNull ? nil : Optional.decodeJson({ $0 as? JsonObject }, four_field!)

    guard let five_field: AnyObject = dict["five"] else {
      assertionFailure("field 'five' is missing")
      return nil
    }
    guard let five: [[AnyObject]] = Array.decodeJson({ $0 as? JsonArray }, five_field) else {
      assertionFailure("field 'five' is not a [[AnyObject]]")
      return nil
    }

    let six_field: AnyObject? = dict["six"]
    let six: [[AnyObject?]?]? = six_field == nil || six_field! is NSNull ? nil : Optional.decodeJson({ Array.decodeJson({ Optional.decodeJson({ Array.decodeJson({ Optional.decodeJson({ $0 as AnyJson }, $0) }, $0) }, $0) }, $0) }, six_field!)

    return Test05(one: one, two: two, three: three, four: four, five: five, six: six)
  }

  func encodeJson() -> [String: AnyObject] {
    var dict: [String: AnyObject] = [:]

    dict["one"] = one
    dict["two"] = two.encodeJson({ $0.encodeJson() }, { $0 })
    dict["three"] = three.encodeJson({ $0 })
    dict["four"] = four.encodeJson({ $0.encodeJson({ $0.encodeJson() }, { $0 }) })
    dict["five"] = five.encodeJson({ $0.encodeJson({ $0 }) })
    dict["six"] = six.encodeJson({ $0.encodeJson({ $0.encodeJson({ $0.encodeJson({ $0.encodeJson({ $0 }) }) }) }) })

    return dict
  }
}
