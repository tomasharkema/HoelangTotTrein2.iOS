//
//  Test11+JsonGen.swift
//
//  Auto generated by swift-json-gen on Tue, 22 Sep 2015 12:32:49 GMT
//  See for details: https://github.com/tomlokhorst/swift-json-gen
//

import Foundation

extension Test11a.Test11b {
  static func decodeJson(json: AnyObject) -> Test11a.Test11b? {
    if let value = json as? X {
      return Test11a.Test11b(rawValue: value)
    }
    return nil
  }

  func encodeJson() -> X {
    return rawValue
  }
}

extension Test11a.Test11b.Test11c.Test11d {
  static func decodeJson(json: AnyObject) -> Test11a.Test11b.Test11c.Test11d? {
    if let value = json as? X {
      return Test11a.Test11b.Test11c.Test11d(rawValue: value)
    }
    return nil
  }

  func encodeJson() -> X {
    return rawValue
  }
}

extension Test11a {
  static func decodeJson(json: AnyObject) -> Test11a? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary")
      return nil
    }

    guard let s_field: AnyObject = dict["s"] else {
      assertionFailure("field 's' is missing")
      return nil
    }
    guard let s: String = String.decodeJson(s_field) else {
      assertionFailure("field 's' is not a String")
      return nil
    }

    return Test11a(s: s)
  }

  func encodeJson() -> [String: AnyObject] {
    var dict: [String: AnyObject] = [:]

    dict["s"] = s.encodeJson()

    return dict
  }
}

extension Test11a.Test11b.Test11c {
  static func decodeJson(json: AnyObject) -> Test11a.Test11b.Test11c? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary")
      return nil
    }

    guard let x_field: AnyObject = dict["x"] else {
      assertionFailure("field 'x' is missing")
      return nil
    }
    guard let x: Int = Int.decodeJson(x_field) else {
      assertionFailure("field 'x' is not a Int")
      return nil
    }

    return Test11a.Test11b.Test11c(x: x)
  }

  func encodeJson() -> [String: AnyObject] {
    var dict: [String: AnyObject] = [:]

    dict["x"] = x.encodeJson()

    return dict
  }
}
