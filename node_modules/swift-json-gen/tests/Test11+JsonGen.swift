//
//  Test11+JsonGen.swift
//
//  Auto generated by swift-json-gen on Thu, 05 Nov 2015 07:19:20 GMT
//  See for details: https://github.com/tomlokhorst/swift-json-gen
//

import Foundation

extension Test11a.Test11b {
  static func decodeJson(json: AnyObject) throws -> Test11a.Test11b {
    guard let rawValue = json as? X else {
      throw JsonDecodeError.WrongType(rawValue: json, expectedType: "X")
    }
    guard let value = Test11a.Test11b(rawValue: rawValue) else {
      throw JsonDecodeError.WrongEnumRawValue(rawValue: rawValue, enumType: "Test11a.Test11b")
    }

    return value
  }

  func encodeJson() -> X {
    return rawValue
  }
}

extension Test11a.Test11b.Test11c.Test11d {
  static func decodeJson(json: AnyObject) throws -> Test11a.Test11b.Test11c.Test11d {
    guard let rawValue = json as? X else {
      throw JsonDecodeError.WrongType(rawValue: json, expectedType: "X")
    }
    guard let value = Test11a.Test11b.Test11c.Test11d(rawValue: rawValue) else {
      throw JsonDecodeError.WrongEnumRawValue(rawValue: rawValue, enumType: "Test11a.Test11b.Test11c.Test11d")
    }

    return value
  }

  func encodeJson() -> X {
    return rawValue
  }
}

extension Test11a {
  static func decodeJson(json: AnyObject) throws -> Test11a {
    guard let dict = json as? [String : AnyObject] else {
      throw JsonDecodeError.WrongType(rawValue: json, expectedType: "Object")
    }

    var errors: [String: JsonDecodeError] = [:]

    var s_optional: String?

    if let s_field: AnyObject = dict["s"] {
      do {
        s_optional = try String.decodeJson(s_field)
      }
      catch let error as JsonDecodeError {
        errors["s"] = error
      }
    }
    else {
      errors["s"] = JsonDecodeError.MissingField
    }

    guard
      let s = s_optional
    else {
      throw JsonDecodeError.StructErrors(type: "Test11a", errors: errors)
    }

    return Test11a(s: s)
  }

  func encodeJson() -> [String: AnyObject] {
    var dict: [String: AnyObject] = [:]

    dict["s"] = s.encodeJson()

    return dict
  }
}

extension Test11a.Test11b.Test11c {
  static func decodeJson(json: AnyObject) throws -> Test11a.Test11b.Test11c {
    guard let dict = json as? [String : AnyObject] else {
      throw JsonDecodeError.WrongType(rawValue: json, expectedType: "Object")
    }

    var errors: [String: JsonDecodeError] = [:]

    var x_optional: Int?

    if let x_field: AnyObject = dict["x"] {
      do {
        x_optional = try Int.decodeJson(x_field)
      }
      catch let error as JsonDecodeError {
        errors["x"] = error
      }
    }
    else {
      errors["x"] = JsonDecodeError.MissingField
    }

    guard
      let x = x_optional
    else {
      throw JsonDecodeError.StructErrors(type: "Test11a.Test11b.Test11c", errors: errors)
    }

    return Test11a.Test11b.Test11c(x: x)
  }

  func encodeJson() -> [String: AnyObject] {
    var dict: [String: AnyObject] = [:]

    dict["x"] = x.encodeJson()

    return dict
  }
}
