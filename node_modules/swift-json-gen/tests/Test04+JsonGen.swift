//
//  Test04+JsonGen.swift
//
//  Auto generated by swift-json-gen on Tue, 22 Sep 2015 12:32:49 GMT
//  See for details: https://github.com/tomlokhorst/swift-json-gen
//

import Foundation

extension Test04 {
  static func decodeJson(json: AnyObject) -> Test04? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary")
      return nil
    }

    guard let one_field: AnyObject = dict["one"] else {
      assertionFailure("field 'one' is missing")
      return nil
    }
    guard let one: Int = Int.decodeJson(one_field) else {
      assertionFailure("field 'one' is not a Int")
      return nil
    }

    let two_field: AnyObject? = dict["two"]
    let two: Bool? = two_field == nil || two_field! is NSNull ? nil : Optional.decodeJson({ MyBool.decodeJson($0) }, two_field!)

    let three_field: AnyObject? = dict["three"]
    let three: Bool? = three_field == nil || three_field! is NSNull ? nil : MySecondOptionalBool.decodeJson({ MyBool.decodeJson($0) }, three_field!)

    guard let four_field: AnyObject = dict["four"] else {
      assertionFailure("field 'four' is missing")
      return nil
    }
    guard let four: [String?] = Array.decodeJson({ Optional.decodeJson({ String.decodeJson($0) }, $0) }, four_field) else {
      assertionFailure("field 'four' is not a [String?]")
      return nil
    }

    let five_field: AnyObject? = dict["five"]
    let five: [Double]? = five_field == nil || five_field! is NSNull ? nil : Optional.decodeJson({ Array.decodeJson({ Double.decodeJson($0) }, $0) }, five_field!)

    let six_field: AnyObject? = dict["six"]
    let six: [Bool?]? = six_field == nil || six_field! is NSNull ? nil : Optional.decodeJson({ Array.decodeJson({ Optional.decodeJson({ Bool.decodeJson($0) }, $0) }, $0) }, six_field!)

    return Test04(one: one, two: two, three: three, four: four, five: five, six: six)
  }

  func encodeJson() -> [String: AnyObject] {
    var dict: [String: AnyObject] = [:]

    dict["one"] = one.encodeJson()
    dict["two"] = two.encodeJson({ $0.encodeJson() })
    dict["three"] = three.encodeJson({ $0.encodeJson() })
    dict["four"] = four.encodeJson({ $0.encodeJson({ $0.encodeJson() }) })
    dict["five"] = five.encodeJson({ $0.encodeJson({ $0.encodeJson() }) })
    dict["six"] = six.encodeJson({ $0.encodeJson({ $0.encodeJson({ $0.encodeJson() }) }) })

    return dict
  }
}
