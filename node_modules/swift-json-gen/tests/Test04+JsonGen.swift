//
//  Test04+JsonGen.swift
//
//  Auto generated by swift-json-gen on Thu, 05 Nov 2015 07:19:20 GMT
//  See for details: https://github.com/tomlokhorst/swift-json-gen
//

import Foundation

extension Test04 {
  static func decodeJson(json: AnyObject) throws -> Test04 {
    guard let dict = json as? [String : AnyObject] else {
      throw JsonDecodeError.WrongType(rawValue: json, expectedType: "Object")
    }

    var errors: [String: JsonDecodeError] = [:]

    var one_optional: Int?
    var two_optional: Bool??
    var three_optional: Bool??
    var four_optional: [String?]?
    var five_optional: [Double]??
    var six_optional: [Bool?]??

    if let one_field: AnyObject = dict["one"] {
      do {
        one_optional = try Int.decodeJson(one_field)
      }
      catch let error as JsonDecodeError {
        errors["one"] = error
      }
    }
    else {
      errors["one"] = JsonDecodeError.MissingField
    }

    let two_field: AnyObject? = dict["two"]
    if let two_field = two_field where !(two_field is NSNull) {
      do {
        two_optional = try Optional.decodeJson({ try MyBool.decodeJson($0) }, two_field)
      }
      catch let error as JsonDecodeError {
        errors["two"] = error
      }
    }
    else {
      two_optional = .Some(nil)
    }

    let three_field: AnyObject? = dict["three"]
    if let three_field = three_field where !(three_field is NSNull) {
      do {
        three_optional = try MySecondOptionalBool.decodeJson({ try MyBool.decodeJson($0) }, three_field)
      }
      catch let error as JsonDecodeError {
        errors["three"] = error
      }
    }
    else {
      three_optional = .Some(nil)
    }

    if let four_field: AnyObject = dict["four"] {
      do {
        four_optional = try Array.decodeJson({ try Optional.decodeJson({ try String.decodeJson($0) }, $0) }, four_field)
      }
      catch let error as JsonDecodeError {
        errors["four"] = error
      }
    }
    else {
      errors["four"] = JsonDecodeError.MissingField
    }

    let five_field: AnyObject? = dict["five"]
    if let five_field = five_field where !(five_field is NSNull) {
      do {
        five_optional = try Optional.decodeJson({ try Array.decodeJson({ try Double.decodeJson($0) }, $0) }, five_field)
      }
      catch let error as JsonDecodeError {
        errors["five"] = error
      }
    }
    else {
      five_optional = .Some(nil)
    }

    let six_field: AnyObject? = dict["six"]
    if let six_field = six_field where !(six_field is NSNull) {
      do {
        six_optional = try Optional.decodeJson({ try Array.decodeJson({ try Optional.decodeJson({ try Bool.decodeJson($0) }, $0) }, $0) }, six_field)
      }
      catch let error as JsonDecodeError {
        errors["six"] = error
      }
    }
    else {
      six_optional = .Some(nil)
    }

    guard
      let one = one_optional,
      let two = two_optional,
      let three = three_optional,
      let four = four_optional,
      let five = five_optional,
      let six = six_optional
    else {
      throw JsonDecodeError.StructErrors(type: "Test04", errors: errors)
    }

    return Test04(one: one, two: two, three: three, four: four, five: five, six: six)
  }

  func encodeJson() -> [String: AnyObject] {
    var dict: [String: AnyObject] = [:]

    dict["one"] = one.encodeJson()
    dict["two"] = two.encodeJson({ $0.encodeJson() })
    dict["three"] = three.encodeJson({ $0.encodeJson() })
    dict["four"] = four.encodeJson({ $0.encodeJson({ $0.encodeJson() }) })
    dict["five"] = five.encodeJson({ $0.encodeJson({ $0.encodeJson() }) })
    dict["six"] = six.encodeJson({ $0.encodeJson({ $0.encodeJson({ $0.encodeJson() }) }) })

    return dict
  }
}
