//
//  Test07+JsonGen.swift
//
//  Auto generated by swift-json-gen on Tue, 22 Sep 2015 12:32:49 GMT
//  See for details: https://github.com/tomlokhorst/swift-json-gen
//

import Foundation

extension Test07 {
  static func decodeJson(json: AnyObject) -> Test07? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary")
      return nil
    }

    guard let one_field: AnyObject = dict["one"] else {
      assertionFailure("field 'one' is missing")
      return nil
    }
    guard let one: Int = Int.decodeJson(one_field) else {
      assertionFailure("field 'one' is not a Int")
      return nil
    }

    guard let nested_field: AnyObject = dict["nested"] else {
      assertionFailure("field 'nested' is missing")
      return nil
    }
    guard let nested: Test07.Nested = Test07.Nested.decodeJson(nested_field) else {
      assertionFailure("field 'nested' is not a Test07.Nested")
      return nil
    }

    return Test07(one: one, nested: nested)
  }

  func encodeJson() -> [String: AnyObject] {
    var dict: [String: AnyObject] = [:]

    dict["one"] = one.encodeJson()
    dict["nested"] = nested.encodeJson()

    return dict
  }
}

extension Test07.Nested {
  static func decodeJson(json: AnyObject) -> Test07.Nested? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary")
      return nil
    }

    guard let one_field: AnyObject = dict["one"] else {
      assertionFailure("field 'one' is missing")
      return nil
    }
    guard let one: Int = Int.decodeJson(one_field) else {
      assertionFailure("field 'one' is not a Int")
      return nil
    }

    guard let two_field: AnyObject = dict["two"] else {
      assertionFailure("field 'two' is missing")
      return nil
    }
    guard let two: Bool = Bool.decodeJson(two_field) else {
      assertionFailure("field 'two' is not a Bool")
      return nil
    }

    return Test07.Nested(one: one, two: two)
  }

  func encodeJson() -> [String: AnyObject] {
    var dict: [String: AnyObject] = [:]

    dict["one"] = one.encodeJson()
    dict["two"] = two.encodeJson()

    return dict
  }
}
