//
//  Test08+JsonGen.swift
//
//  Auto generated by swift-json-gen on Tue, 22 Sep 2015 12:32:49 GMT
//  See for details: https://github.com/tomlokhorst/swift-json-gen
//

import Foundation

extension Enum08 {
  static func decodeJson(json: AnyObject) -> Enum08? {
    if let value = json as? Test08String {
      return Enum08(rawValue: value)
    }
    return nil
  }

  func encodeJson() -> Test08String {
    return rawValue
  }
}

extension Test08 {
  static func decodeJson(json: AnyObject) -> Test08? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary")
      return nil
    }

    guard let one_field: AnyObject = dict["one"] else {
      assertionFailure("field 'one' is missing")
      return nil
    }
    guard let one: Int = Int.decodeJson(one_field) else {
      assertionFailure("field 'one' is not a Int")
      return nil
    }

    guard let two_field: AnyObject = dict["two"] else {
      assertionFailure("field 'two' is missing")
      return nil
    }
    guard let two: [String : Int] = Dictionary.decodeJson({ String.decodeJson($0) }, { Int.decodeJson($0) }, two_field) else {
      assertionFailure("field 'two' is not a [String : Int]")
      return nil
    }

    guard let four_field: AnyObject = dict["four"] else {
      assertionFailure("field 'four' is missing")
      return nil
    }
    guard let four: [Enum08 : Int] = Dictionary.decodeJson({ Enum08.decodeJson($0) }, { Int.decodeJson($0) }, four_field) else {
      assertionFailure("field 'four' is not a [Enum08 : Int]")
      return nil
    }

    guard let five_field: AnyObject = dict["five"] else {
      assertionFailure("field 'five' is missing")
      return nil
    }
    guard let five: [String : AnyObject] = five_field as? [String : AnyObject] else {
      assertionFailure("field 'five' is not a [String : AnyObject]")
      return nil
    }

    return Test08(one: one, two: two, four: four, five: five)
  }

  func encodeJson() -> [String: AnyObject] {
    var dict: [String: AnyObject] = [:]

    dict["one"] = one.encodeJson()
    dict["two"] = two.encodeJson({ $0.encodeJson() }, { $0.encodeJson() })
    /* WARNING: Json only supports Strings as keys in dictionaries */
    dict["four"] = four.encodeJson({ $0.encodeJson() }, { $0.encodeJson() })
    dict["five"] = five.encodeJson({ $0.encodeJson() }, { $0 })

    return dict
  }
}
