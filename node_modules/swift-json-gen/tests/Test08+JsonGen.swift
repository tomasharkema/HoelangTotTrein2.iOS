//
//  Test08+JsonGen.swift
//
//  Auto generated by swift-json-gen on Thu, 05 Nov 2015 07:19:20 GMT
//  See for details: https://github.com/tomlokhorst/swift-json-gen
//

import Foundation

extension Enum08 {
  static func decodeJson(json: AnyObject) throws -> Enum08 {
    guard let rawValue = json as? Test08String else {
      throw JsonDecodeError.WrongType(rawValue: json, expectedType: "Test08String")
    }
    guard let value = Enum08(rawValue: rawValue) else {
      throw JsonDecodeError.WrongEnumRawValue(rawValue: rawValue, enumType: "Enum08")
    }

    return value
  }

  func encodeJson() -> Test08String {
    return rawValue
  }
}

extension Test08 {
  static func decodeJson(json: AnyObject) throws -> Test08 {
    guard let dict = json as? [String : AnyObject] else {
      throw JsonDecodeError.WrongType(rawValue: json, expectedType: "Object")
    }

    var errors: [String: JsonDecodeError] = [:]

    var one_optional: Int?
    var two_optional: [String : Int]?
    var four_optional: [Enum08 : Int]?
    var five_optional: [String : AnyObject]?

    if let one_field: AnyObject = dict["one"] {
      do {
        one_optional = try Int.decodeJson(one_field)
      }
      catch let error as JsonDecodeError {
        errors["one"] = error
      }
    }
    else {
      errors["one"] = JsonDecodeError.MissingField
    }

    if let two_field: AnyObject = dict["two"] {
      do {
        two_optional = try Dictionary.decodeJson({ try String.decodeJson($0) }, { try Int.decodeJson($0) }, two_field)
      }
      catch let error as JsonDecodeError {
        errors["two"] = error
      }
    }
    else {
      errors["two"] = JsonDecodeError.MissingField
    }

    if let four_field: AnyObject = dict["four"] {
      do {
        four_optional = try Dictionary.decodeJson({ try Enum08.decodeJson($0) }, { try Int.decodeJson($0) }, four_field)
      }
      catch let error as JsonDecodeError {
        errors["four"] = error
      }
    }
    else {
      errors["four"] = JsonDecodeError.MissingField
    }

    if let five_field: AnyObject = dict["five"] {
      if let five_field = five_field as? [String : AnyObject] {
        five_optional = five_field
      }
      else {
        errors["five"] = JsonDecodeError.WrongType(rawValue: five_field, expectedType: "[String : AnyObject]")
      }
    }
    else {
      errors["five"] = JsonDecodeError.MissingField
    }

    guard
      let one = one_optional,
      let two = two_optional,
      let four = four_optional,
      let five = five_optional
    else {
      throw JsonDecodeError.StructErrors(type: "Test08", errors: errors)
    }

    return Test08(one: one, two: two, four: four, five: five)
  }

  func encodeJson() -> [String: AnyObject] {
    var dict: [String: AnyObject] = [:]

    dict["one"] = one.encodeJson()
    dict["two"] = two.encodeJson({ $0.encodeJson() }, { $0.encodeJson() })
    /* WARNING: Json only supports Strings as keys in dictionaries */
    dict["four"] = four.encodeJson({ $0.encodeJson() }, { $0.encodeJson() })
    dict["five"] = five.encodeJson({ $0.encodeJson() }, { $0 })

    return dict
  }
}
