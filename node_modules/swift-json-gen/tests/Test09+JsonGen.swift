//
//  Test09+JsonGen.swift
//
//  Auto generated by swift-json-gen on Tue, 22 Sep 2015 12:32:49 GMT
//  See for details: https://github.com/tomlokhorst/swift-json-gen
//

import Foundation

extension Test09 {
  static func decodeJson(json: AnyObject) -> Test09? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary")
      return nil
    }

    guard let one_field: AnyObject = dict["one"] else {
      assertionFailure("field 'one' is missing")
      return nil
    }
    guard let one: Int = Int.decodeJson(one_field) else {
      assertionFailure("field 'one' is not a Int")
      return nil
    }

    guard let intSub1_field: AnyObject = dict["intSub1"] else {
      assertionFailure("field 'intSub1' is missing")
      return nil
    }
    guard let intSub1: Sub1<Int> = Sub1.decodeJson({ Int.decodeJson($0) }, intSub1_field) else {
      assertionFailure("field 'intSub1' is not a Sub1<Int>")
      return nil
    }

    guard let stringSub1_field: AnyObject = dict["stringSub1"] else {
      assertionFailure("field 'stringSub1' is missing")
      return nil
    }
    guard let stringSub1: Sub1<String> = Sub1.decodeJson({ String.decodeJson($0) }, stringSub1_field) else {
      assertionFailure("field 'stringSub1' is not a Sub1<String>")
      return nil
    }

    guard let sub2_field: AnyObject = dict["sub2"] else {
      assertionFailure("field 'sub2' is missing")
      return nil
    }
    guard let sub2: Sub2<Int, Bool> = Sub2.decodeJson({ Int.decodeJson($0) }, { Bool.decodeJson($0) }, sub2_field) else {
      assertionFailure("field 'sub2' is not a Sub2<Int, Bool>")
      return nil
    }

    guard let sub3_field: AnyObject = dict["sub3"] else {
      assertionFailure("field 'sub3' is missing")
      return nil
    }
    guard let sub3: Sub3<Int, Int, String> = Sub3.decodeJson({ Int.decodeJson($0) }, { Int.decodeJson($0) }, { String.decodeJson($0) }, sub3_field) else {
      assertionFailure("field 'sub3' is not a Sub3<Int, Int, String>")
      return nil
    }

    return Test09(one: one, intSub1: intSub1, stringSub1: stringSub1, sub2: sub2, sub3: sub3)
  }

  func encodeJson() -> [String: AnyObject] {
    var dict: [String: AnyObject] = [:]

    dict["one"] = one.encodeJson()
    dict["intSub1"] = intSub1.encodeJson({ $0.encodeJson() })
    dict["stringSub1"] = stringSub1.encodeJson({ $0.encodeJson() })
    dict["sub2"] = sub2.encodeJson({ $0.encodeJson() }, { $0.encodeJson() })
    dict["sub3"] = sub3.encodeJson({ $0.encodeJson() }, { $0.encodeJson() }, { $0.encodeJson() })

    return dict
  }
}

extension Sub1 {
  static func decodeJson(decodeT: AnyObject -> T?, _ json: AnyObject) -> Sub1? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary")
      return nil
    }

    guard let one_field: AnyObject = dict["one"] else {
      assertionFailure("field 'one' is missing")
      return nil
    }
    guard let one: Bool = Bool.decodeJson(one_field) else {
      assertionFailure("field 'one' is not a Bool")
      return nil
    }

    guard let value_field: AnyObject = dict["value"] else {
      assertionFailure("field 'value' is missing")
      return nil
    }
    guard let value: T = decodeT(value_field) else {
      assertionFailure("field 'value' is not a T")
      return nil
    }

    return Sub1(one: one, value: value)
  }

  func encodeJson(encodeT: T -> AnyObject) -> [String: AnyObject] {
    var dict: [String: AnyObject] = [:]

    dict["one"] = one.encodeJson()
    dict["value"] = encodeT(value)

    return dict
  }
}

extension Sub2 {
  static func decodeJson(decodeA: AnyObject -> A?, _ decodeB: AnyObject -> B?, _ json: AnyObject) -> Sub2? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary")
      return nil
    }

    guard let a_field: AnyObject = dict["a"] else {
      assertionFailure("field 'a' is missing")
      return nil
    }
    guard let a: A = decodeA(a_field) else {
      assertionFailure("field 'a' is not a A")
      return nil
    }

    let b_field: AnyObject? = dict["b"]
    let b: B? = b_field == nil || b_field! is NSNull ? nil : Optional.decodeJson({ decodeB($0) }, b_field!)

    let c_field: AnyObject? = dict["c"]
    let c: [[B?]?]? = c_field == nil || c_field! is NSNull ? nil : Optional.decodeJson({ Array.decodeJson({ Optional.decodeJson({ Array.decodeJson({ Optional.decodeJson({ decodeB($0) }, $0) }, $0) }, $0) }, $0) }, c_field!)

    return Sub2(a: a, b: b, c: c)
  }

  func encodeJson(encodeA: A -> AnyObject, _ encodeB: B -> AnyObject) -> [String: AnyObject] {
    var dict: [String: AnyObject] = [:]

    dict["a"] = encodeA(a)
    dict["b"] = b.encodeJson({ encodeB($0) })
    dict["c"] = c.encodeJson({ $0.encodeJson({ $0.encodeJson({ $0.encodeJson({ $0.encodeJson({ encodeB($0) }) }) }) }) })

    return dict
  }
}

extension Sub3 {
  static func decodeJson(decodeA: AnyObject -> A?, _ decodeB: AnyObject -> B?, _ decodeC: AnyObject -> C?, _ json: AnyObject) -> Sub3? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary")
      return nil
    }

    guard let a1_field: AnyObject = dict["a1"] else {
      assertionFailure("field 'a1' is missing")
      return nil
    }
    guard let a1: A = decodeA(a1_field) else {
      assertionFailure("field 'a1' is not a A")
      return nil
    }

    guard let a2_field: AnyObject = dict["a2"] else {
      assertionFailure("field 'a2' is missing")
      return nil
    }
    guard let a2: A = decodeA(a2_field) else {
      assertionFailure("field 'a2' is not a A")
      return nil
    }

    let b_field: AnyObject? = dict["b"]
    let b: B? = b_field == nil || b_field! is NSNull ? nil : Optional.decodeJson({ decodeB($0) }, b_field!)

    guard let c_field: AnyObject = dict["c"] else {
      assertionFailure("field 'c' is missing")
      return nil
    }
    guard let c: [C] = Array.decodeJson({ decodeC($0) }, c_field) else {
      assertionFailure("field 'c' is not a [C]")
      return nil
    }

    guard let sub2_field: AnyObject = dict["sub2"] else {
      assertionFailure("field 'sub2' is missing")
      return nil
    }
    guard let sub2: Sub2<B, A> = Sub2.decodeJson({ decodeB($0) }, { decodeA($0) }, sub2_field) else {
      assertionFailure("field 'sub2' is not a Sub2<B, A>")
      return nil
    }

    return Sub3(a1: a1, a2: a2, b: b, c: c, sub2: sub2)
  }

  func encodeJson(encodeA: A -> AnyObject, _ encodeB: B -> AnyObject, _ encodeC: C -> AnyObject) -> [String: AnyObject] {
    var dict: [String: AnyObject] = [:]

    dict["a1"] = encodeA(a1)
    dict["a2"] = encodeA(a2)
    dict["b"] = b.encodeJson({ encodeB($0) })
    dict["c"] = c.encodeJson({ encodeC($0) })
    dict["sub2"] = sub2.encodeJson({ encodeB($0) }, { encodeA($0) })

    return dict
  }
}
