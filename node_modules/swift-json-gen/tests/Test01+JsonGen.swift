//
//  Test01+JsonGen.swift
//
//  Auto generated by swift-json-gen on Thu, 19 Nov 2015 06:57:05 GMT
//  See for details: https://github.com/tomlokhorst/swift-json-gen
//

import Foundation

extension Test01 {
  static func decodeJson(json: AnyObject) throws -> Test01 {
    guard let dict = json as? [String : AnyObject] else {
      throw JsonDecodeError.WrongType(rawValue: json, expectedType: "Object")
    }

    var errors: [String: JsonDecodeError] = [:]

    var one_optional: Int?
    var two_optional: String??

    if let one_field: AnyObject = dict["one"] {
      do {
        one_optional = try Int.decodeJson(one_field)
      }
      catch let error as JsonDecodeError {
        errors["one"] = error
      }
    }
    else {
      errors["one"] = JsonDecodeError.MissingField
    }

    let two_field: AnyObject? = dict["two"]
    if let two_field = two_field where !(two_field is NSNull) {
      do {
        two_optional = try Optional.decodeJson({ try String.decodeJson($0) }, two_field)
      }
      catch let error as JsonDecodeError {
        errors["two"] = error
      }
    }
    else {
      two_optional = .Some(nil)
    }

    guard
      let one = one_optional,
      let two = two_optional
    else {
      throw JsonDecodeError.StructErrors(type: "Test01", errors: errors)
    }

    return Test01(one: one, two: two)
  }

  func encodeJson() -> [String: AnyObject] {
    var dict: [String: AnyObject] = [:]

    dict["one"] = one.encodeJson()
    dict["two"] = two.encodeJson({ $0.encodeJson() })

    return dict
  }
}
