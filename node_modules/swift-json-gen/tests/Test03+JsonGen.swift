//
//  Test03+JsonGen.swift
//
//  Auto generated by swift-json-gen on Tue, 22 Sep 2015 12:32:49 GMT
//  See for details: https://github.com/tomlokhorst/swift-json-gen
//

import Foundation

extension Test03 {
  static func decodeJson(json: AnyObject) -> Test03? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary")
      return nil
    }

    guard let one_field: AnyObject = dict["one"] else {
      assertionFailure("field 'one' is missing")
      return nil
    }
    guard let one: Int = Int.decodeJson(one_field) else {
      assertionFailure("field 'one' is not a Int")
      return nil
    }

    let two_field: AnyObject? = dict["two"]
    let two: String? = two_field == nil || two_field! is NSNull ? nil : Optional.decodeJson({ String.decodeJson($0) }, two_field!)

    guard let three_field: AnyObject = dict["three"] else {
      assertionFailure("field 'three' is missing")
      return nil
    }
    guard let three: [Bool] = Array.decodeJson({ Bool.decodeJson($0) }, three_field) else {
      assertionFailure("field 'three' is not a [Bool]")
      return nil
    }

    return Test03(one: one, two: two, three: three)
  }

  func encodeJson() -> [String: AnyObject] {
    var dict: [String: AnyObject] = [:]

    dict["one"] = one.encodeJson()
    dict["two"] = two.encodeJson({ $0.encodeJson() })
    dict["three"] = three.encodeJson({ $0.encodeJson() })

    return dict
  }
}
