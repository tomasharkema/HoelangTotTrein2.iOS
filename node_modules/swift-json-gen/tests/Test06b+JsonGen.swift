//
//  Test06b+JsonGen.swift
//
//  Auto generated by swift-json-gen on Thu, 05 Nov 2015 07:19:20 GMT
//  See for details: https://github.com/tomlokhorst/swift-json-gen
//

import Foundation

extension Sub06b {
  static func decodeJson(json: AnyObject) throws -> Sub06b {
    guard let dict = json as? [String : AnyObject] else {
      throw JsonDecodeError.WrongType(rawValue: json, expectedType: "Object")
    }

    var errors: [String: JsonDecodeError] = [:]

    var one_optional: Int?
    var sub_optional: Sub06a?

    if let one_field: AnyObject = dict["one"] {
      do {
        one_optional = try Int.decodeJson(one_field)
      }
      catch let error as JsonDecodeError {
        errors["one"] = error
      }
    }
    else {
      errors["one"] = JsonDecodeError.MissingField
    }

    if let sub_field: AnyObject = dict["sub"] {
      do {
        sub_optional = try Sub06a.decodeJson(sub_field)
      }
      catch let error as JsonDecodeError {
        errors["sub"] = error
      }
    }
    else {
      errors["sub"] = JsonDecodeError.MissingField
    }

    guard
      let one = one_optional,
      let sub = sub_optional
    else {
      throw JsonDecodeError.StructErrors(type: "Sub06b", errors: errors)
    }

    return Sub06b(one: one, sub: sub)
  }

  func encodeJson() -> [String: AnyObject] {
    var dict: [String: AnyObject] = [:]

    dict["one"] = one.encodeJson()
    dict["sub"] = sub.encodeJson()

    return dict
  }
}
