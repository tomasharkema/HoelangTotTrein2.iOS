//
//  Test06a+JsonGen.swift
//
//  Auto generated by swift-json-gen on Thu, 05 Nov 2015 07:19:20 GMT
//  See for details: https://github.com/tomlokhorst/swift-json-gen
//

import Foundation

extension Test06a {
  static func decodeJson(json: AnyObject) throws -> Test06a {
    guard let dict = json as? [String : AnyObject] else {
      throw JsonDecodeError.WrongType(rawValue: json, expectedType: "Object")
    }

    var errors: [String: JsonDecodeError] = [:]

    var one_optional: Int?
    var sub_optional: Sub06b?

    if let one_field: AnyObject = dict["one"] {
      do {
        one_optional = try Int.decodeJson(one_field)
      }
      catch let error as JsonDecodeError {
        errors["one"] = error
      }
    }
    else {
      errors["one"] = JsonDecodeError.MissingField
    }

    if let sub_field: AnyObject = dict["sub"] {
      do {
        sub_optional = try Sub06b.decodeJson(sub_field)
      }
      catch let error as JsonDecodeError {
        errors["sub"] = error
      }
    }
    else {
      errors["sub"] = JsonDecodeError.MissingField
    }

    guard
      let one = one_optional,
      let sub = sub_optional
    else {
      throw JsonDecodeError.StructErrors(type: "Test06a", errors: errors)
    }

    return Test06a(one: one, sub: sub)
  }

  func encodeJson() -> [String: AnyObject] {
    var dict: [String: AnyObject] = [:]

    dict["one"] = one.encodeJson()
    dict["sub"] = sub.encodeJson()

    return dict
  }
}

extension Sub06a {
  static func decodeJson(json: AnyObject) throws -> Sub06a {
    guard let dict = json as? [String : AnyObject] else {
      throw JsonDecodeError.WrongType(rawValue: json, expectedType: "Object")
    }

    var errors: [String: JsonDecodeError] = [:]

    var two_optional: NSDate?

    if let two_field: AnyObject = dict["two"] {
      do {
        two_optional = try NSDate.decodeJson(two_field)
      }
      catch let error as JsonDecodeError {
        errors["two"] = error
      }
    }
    else {
      errors["two"] = JsonDecodeError.MissingField
    }

    guard
      let two = two_optional
    else {
      throw JsonDecodeError.StructErrors(type: "Sub06a", errors: errors)
    }

    return Sub06a(two: two)
  }

  func encodeJson() -> [String: AnyObject] {
    var dict: [String: AnyObject] = [:]

    dict["two"] = two.encodeJson()

    return dict
  }
}
