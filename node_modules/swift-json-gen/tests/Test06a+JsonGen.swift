//
//  Test06a+JsonGen.swift
//
//  Auto generated by swift-json-gen on Tue, 22 Sep 2015 12:32:49 GMT
//  See for details: https://github.com/tomlokhorst/swift-json-gen
//

import Foundation

extension Test06a {
  static func decodeJson(json: AnyObject) -> Test06a? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary")
      return nil
    }

    guard let one_field: AnyObject = dict["one"] else {
      assertionFailure("field 'one' is missing")
      return nil
    }
    guard let one: Int = Int.decodeJson(one_field) else {
      assertionFailure("field 'one' is not a Int")
      return nil
    }

    guard let sub_field: AnyObject = dict["sub"] else {
      assertionFailure("field 'sub' is missing")
      return nil
    }
    guard let sub: Sub06b = Sub06b.decodeJson(sub_field) else {
      assertionFailure("field 'sub' is not a Sub06b")
      return nil
    }

    return Test06a(one: one, sub: sub)
  }

  func encodeJson() -> [String: AnyObject] {
    var dict: [String: AnyObject] = [:]

    dict["one"] = one.encodeJson()
    dict["sub"] = sub.encodeJson()

    return dict
  }
}

extension Sub06a {
  static func decodeJson(json: AnyObject) -> Sub06a? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary")
      return nil
    }

    guard let two_field: AnyObject = dict["two"] else {
      assertionFailure("field 'two' is missing")
      return nil
    }
    guard let two: NSDate = NSDate.decodeJson(two_field) else {
      assertionFailure("field 'two' is not a NSDate")
      return nil
    }

    return Sub06a(two: two)
  }

  func encodeJson() -> [String: AnyObject] {
    var dict: [String: AnyObject] = [:]

    dict["two"] = two.encodeJson()

    return dict
  }
}
