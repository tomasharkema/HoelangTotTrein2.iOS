//
//  SendOrder+JsonGen.swift
//
//  Auto generated by swift-json-gen on Thu, 06 Aug 2015 13:12:53 GMT
//

import Foundation

extension SendPrintLabelStatus {
  static func decodeJson(json: AnyObject) -> SendPrintLabelStatus? {
    if let value = json as? String {
      return SendPrintLabelStatus(rawValue: value)
    }
    return nil
  }

  func encodeJson() -> AnyObject {
    return rawValue
  }
}

extension SendOrderStatus {
  static func decodeJson(json: AnyObject) -> SendOrderStatus? {
    if let value = json as? String {
      return SendOrderStatus(rawValue: value)
    }
    return nil
  }

  func encodeJson() -> AnyObject {
    return rawValue
  }
}

extension SendProductClassification {
  static func decodeJson(json: AnyObject) -> SendProductClassification? {
    if let value = json as? String {
      return SendProductClassification(rawValue: value)
    }
    return nil
  }

  func encodeJson() -> AnyObject {
    return rawValue
  }
}

extension SendHandlingType {
  static func decodeJson(json: AnyObject) -> SendHandlingType? {
    if let value = json as? String {
      return SendHandlingType(rawValue: value)
    }
    return nil
  }

  func encodeJson() -> AnyObject {
    return rawValue
  }
}

extension SendPresentationType {
  static func decodeJson(json: AnyObject) -> SendPresentationType? {
    if let value = json as? String {
      return SendPresentationType(rawValue: value)
    }
    return nil
  }

  func encodeJson() -> AnyObject {
    return rawValue
  }
}

extension SendOrder {
  static func decodeJson(json: AnyObject) -> SendOrder? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary");
      return nil
    }

    guard let orderDate_field: AnyObject? = dict["orderDate"] else {
      assertionFailure("field 'orderDate' is missing")
      return nil
    }
    guard let orderDate: NSDate = NSDate.decodeJson(orderDate_field!) else {
      assertionFailure("field 'orderDate' is not a NSDate")
      return nil
    }

    guard let orderNumber_field: AnyObject? = dict["orderNumber"] else {
      assertionFailure("field 'orderNumber' is missing")
      return nil
    }
    guard let orderNumber: String = String.decodeJson(orderNumber_field!) else {
      assertionFailure("field 'orderNumber' is not a String")
      return nil
    }

    let preannounceExpirationDate_field: AnyObject? = dict["preannounceExpirationDate"]
    let preannounceExpirationDate: NSDate? = preannounceExpirationDate_field == nil ? nil : Optional.decodeJson({ NSDate.decodeJson($0) }, preannounceExpirationDate_field!)

    guard let shipments_field: AnyObject? = dict["shipments"] else {
      assertionFailure("field 'shipments' is missing")
      return nil
    }
    guard let shipments: [SendShipment] = Array.decodeJson({ SendShipment.decodeJson($0) }, shipments_field!) else {
      assertionFailure("field 'shipments' is not a [SendShipment]")
      return nil
    }

    guard let senderAddress_field: AnyObject? = dict["senderAddress"] else {
      assertionFailure("field 'senderAddress' is missing")
      return nil
    }
    guard let senderAddress: SendAddress = SendAddress.decodeJson(senderAddress_field!) else {
      assertionFailure("field 'senderAddress' is not a SendAddress")
      return nil
    }

    guard let printLabelStatus_field: AnyObject? = dict["printLabelStatus"] else {
      assertionFailure("field 'printLabelStatus' is missing")
      return nil
    }
    guard let printLabelStatus: SendPrintLabelStatus = SendPrintLabelStatus.decodeJson(printLabelStatus_field!) else {
      assertionFailure("field 'printLabelStatus' is not a SendPrintLabelStatus")
      return nil
    }

    guard let orderToken_field: AnyObject? = dict["orderToken"] else {
      assertionFailure("field 'orderToken' is missing")
      return nil
    }
    guard let orderToken: SendOrderToken = SendOrderToken.decodeJson(orderToken_field!) else {
      assertionFailure("field 'orderToken' is not a SendOrderToken")
      return nil
    }

    guard let orderStatus_field: AnyObject? = dict["orderStatus"] else {
      assertionFailure("field 'orderStatus' is missing")
      return nil
    }
    guard let orderStatus: SendOrderStatus = SendOrderStatus.decodeJson(orderStatus_field!) else {
      assertionFailure("field 'orderStatus' is not a SendOrderStatus")
      return nil
    }

    guard let agreedToTerms_field: AnyObject? = dict["agreedToTerms"] else {
      assertionFailure("field 'agreedToTerms' is missing")
      return nil
    }
    guard let agreedToTerms: Bool = Bool.decodeJson(agreedToTerms_field!) else {
      assertionFailure("field 'agreedToTerms' is not a Bool")
      return nil
    }

    let label_field: AnyObject? = dict["label"]
    let label: SendLabel? = label_field == nil ? nil : Optional.decodeJson({ SendLabel.decodeJson($0) }, label_field!)

    return SendOrder(orderDate: orderDate, orderNumber: orderNumber, preannounceExpirationDate: preannounceExpirationDate, shipments: shipments, senderAddress: senderAddress, printLabelStatus: printLabelStatus, orderToken: orderToken, orderStatus: orderStatus, agreedToTerms: agreedToTerms, label: label)
  }

  func encodeJson() -> AnyObject {
    var dict: [String: AnyObject] = [:]

    dict["orderDate"] = orderDate.encodeJson()
    dict["orderNumber"] = orderNumber.encodeJson()
    dict["preannounceExpirationDate"] = preannounceExpirationDate.encodeJson({ $0.encodeJson() })
    dict["shipments"] = shipments.encodeJson({ $0.encodeJson() })
    dict["senderAddress"] = senderAddress.encodeJson()
    dict["printLabelStatus"] = printLabelStatus.encodeJson()
    dict["orderToken"] = orderToken.encodeJson()
    dict["orderStatus"] = orderStatus.encodeJson()
    dict["agreedToTerms"] = agreedToTerms.encodeJson()
    dict["label"] = label.encodeJson({ $0.encodeJson() })

    return dict
  }
}

extension SendLabel {
  static func decodeJson(json: AnyObject) -> SendLabel? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary");
      return nil
    }

    let retailLabelBarcode_field: AnyObject? = dict["retailLabelBarcode"]
    let retailLabelBarcode: String? = retailLabelBarcode_field == nil ? nil : Optional.decodeJson({ String.decodeJson($0) }, retailLabelBarcode_field!)

    let downloadParcelLabel_field: AnyObject? = dict["downloadParcelLabel"]
    let downloadParcelLabel: String? = downloadParcelLabel_field == nil ? nil : Optional.decodeJson({ String.decodeJson($0) }, downloadParcelLabel_field!)

    return SendLabel(retailLabelBarcode: retailLabelBarcode, downloadParcelLabel: downloadParcelLabel)
  }

  func encodeJson() -> AnyObject {
    var dict: [String: AnyObject] = [:]

    dict["retailLabelBarcode"] = retailLabelBarcode.encodeJson({ $0.encodeJson() })
    dict["downloadParcelLabel"] = downloadParcelLabel.encodeJson({ $0.encodeJson() })

    return dict
  }
}

extension SendAddress {
  static func decodeJson(json: AnyObject) -> SendAddress? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary");
      return nil
    }

    let companyName_field: AnyObject? = dict["companyName"]
    let companyName: String? = companyName_field == nil ? nil : Optional.decodeJson({ String.decodeJson($0) }, companyName_field!)

    let firstName_field: AnyObject? = dict["firstName"]
    let firstName: String? = firstName_field == nil ? nil : Optional.decodeJson({ String.decodeJson($0) }, firstName_field!)

    let middleName_field: AnyObject? = dict["middleName"]
    let middleName: String? = middleName_field == nil ? nil : Optional.decodeJson({ String.decodeJson($0) }, middleName_field!)

    let lastName_field: AnyObject? = dict["lastName"]
    let lastName: String? = lastName_field == nil ? nil : Optional.decodeJson({ String.decodeJson($0) }, lastName_field!)

    let email_field: AnyObject? = dict["email"]
    let email: String? = email_field == nil ? nil : Optional.decodeJson({ String.decodeJson($0) }, email_field!)

    let street_field: AnyObject? = dict["street"]
    let street: String? = street_field == nil ? nil : Optional.decodeJson({ String.decodeJson($0) }, street_field!)

    guard let houseNumber_field: AnyObject? = dict["houseNumber"] else {
      assertionFailure("field 'houseNumber' is missing")
      return nil
    }
    guard let houseNumber: String = String.decodeJson(houseNumber_field!) else {
      assertionFailure("field 'houseNumber' is not a String")
      return nil
    }

    let houseNumberSuffix_field: AnyObject? = dict["houseNumberSuffix"]
    let houseNumberSuffix: String? = houseNumberSuffix_field == nil ? nil : Optional.decodeJson({ String.decodeJson($0) }, houseNumberSuffix_field!)

    guard let postalCode_field: AnyObject? = dict["postalCode"] else {
      assertionFailure("field 'postalCode' is missing")
      return nil
    }
    guard let postalCode: String = String.decodeJson(postalCode_field!) else {
      assertionFailure("field 'postalCode' is not a String")
      return nil
    }

    let town_field: AnyObject? = dict["town"]
    let town: String? = town_field == nil ? nil : Optional.decodeJson({ String.decodeJson($0) }, town_field!)

    guard let country_field: AnyObject? = dict["country"] else {
      assertionFailure("field 'country' is missing")
      return nil
    }
    guard let country: String = String.decodeJson(country_field!) else {
      assertionFailure("field 'country' is not a String")
      return nil
    }

    return SendAddress(companyName: companyName, firstName: firstName, middleName: middleName, lastName: lastName, email: email, street: street, houseNumber: houseNumber, houseNumberSuffix: houseNumberSuffix, postalCode: postalCode, town: town, country: country)
  }

  func encodeJson() -> AnyObject {
    var dict: [String: AnyObject] = [:]

    dict["companyName"] = companyName.encodeJson({ $0.encodeJson() })
    dict["firstName"] = firstName.encodeJson({ $0.encodeJson() })
    dict["middleName"] = middleName.encodeJson({ $0.encodeJson() })
    dict["lastName"] = lastName.encodeJson({ $0.encodeJson() })
    dict["email"] = email.encodeJson({ $0.encodeJson() })
    dict["street"] = street.encodeJson({ $0.encodeJson() })
    dict["houseNumber"] = houseNumber.encodeJson()
    dict["houseNumberSuffix"] = houseNumberSuffix.encodeJson({ $0.encodeJson() })
    dict["postalCode"] = postalCode.encodeJson()
    dict["town"] = town.encodeJson({ $0.encodeJson() })
    dict["country"] = country.encodeJson()

    return dict
  }
}

extension SendShipment {
  static func decodeJson(json: AnyObject) -> SendShipment? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary");
      return nil
    }

    guard let deliveryAddress_field: AnyObject? = dict["deliveryAddress"] else {
      assertionFailure("field 'deliveryAddress' is missing")
      return nil
    }
    guard let deliveryAddress: SendAddress = SendAddress.decodeJson(deliveryAddress_field!) else {
      assertionFailure("field 'deliveryAddress' is not a SendAddress")
      return nil
    }

    guard let product_field: AnyObject? = dict["product"] else {
      assertionFailure("field 'product' is missing")
      return nil
    }
    guard let product: SendProduct = SendProduct.decodeJson(product_field!) else {
      assertionFailure("field 'product' is not a SendProduct")
      return nil
    }

    let preannounceExpirationDate_field: AnyObject? = dict["preannounceExpirationDate"]
    let preannounceExpirationDate: NSDate? = preannounceExpirationDate_field == nil ? nil : Optional.decodeJson({ NSDate.decodeJson($0) }, preannounceExpirationDate_field!)

    let description_field: AnyObject? = dict["description"]
    let description: String? = description_field == nil ? nil : Optional.decodeJson({ String.decodeJson($0) }, description_field!)

    guard let totalPrice_field: AnyObject? = dict["totalPrice"] else {
      assertionFailure("field 'totalPrice' is missing")
      return nil
    }
    guard let totalPrice: Int = Int.decodeJson(totalPrice_field!) else {
      assertionFailure("field 'totalPrice' is not a Int")
      return nil
    }

    return SendShipment(deliveryAddress: deliveryAddress, product: product, preannounceExpirationDate: preannounceExpirationDate, description: description, totalPrice: totalPrice)
  }

  func encodeJson() -> AnyObject {
    var dict: [String: AnyObject] = [:]

    dict["deliveryAddress"] = deliveryAddress.encodeJson()
    dict["product"] = product.encodeJson()
    dict["preannounceExpirationDate"] = preannounceExpirationDate.encodeJson({ $0.encodeJson() })
    dict["description"] = description.encodeJson({ $0.encodeJson() })
    dict["totalPrice"] = totalPrice.encodeJson()

    return dict
  }
}

extension SendOrderToken {
  static func decodeJson(json: AnyObject) -> SendOrderToken? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary");
      return nil
    }

    guard let value_field: AnyObject? = dict["value"] else {
      assertionFailure("field 'value' is missing")
      return nil
    }
    guard let value: String = String.decodeJson(value_field!) else {
      assertionFailure("field 'value' is not a String")
      return nil
    }

    return SendOrderToken(value: value)
  }

  func encodeJson() -> AnyObject {
    var dict: [String: AnyObject] = [:]

    dict["value"] = value.encodeJson()

    return dict
  }
}

extension SendProduct {
  static func decodeJson(json: AnyObject) -> SendProduct? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary");
      return nil
    }

    guard let catalogueNameKey_field: AnyObject? = dict["catalogueNameKey"] else {
      assertionFailure("field 'catalogueNameKey' is missing")
      return nil
    }
    guard let catalogueNameKey: String = String.decodeJson(catalogueNameKey_field!) else {
      assertionFailure("field 'catalogueNameKey' is not a String")
      return nil
    }

    guard let productCode_field: AnyObject? = dict["productCode"] else {
      assertionFailure("field 'productCode' is missing")
      return nil
    }
    guard let productCode: String = String.decodeJson(productCode_field!) else {
      assertionFailure("field 'productCode' is not a String")
      return nil
    }

    guard let productKey_field: AnyObject? = dict["productKey"] else {
      assertionFailure("field 'productKey' is missing")
      return nil
    }
    guard let productKey: String = String.decodeJson(productKey_field!) else {
      assertionFailure("field 'productKey' is not a String")
      return nil
    }

    guard let productClassification_field: AnyObject? = dict["productClassification"] else {
      assertionFailure("field 'productClassification' is missing")
      return nil
    }
    guard let productClassification: SendProductClassification = SendProductClassification.decodeJson(productClassification_field!) else {
      assertionFailure("field 'productClassification' is not a SendProductClassification")
      return nil
    }

    guard let handlingType_field: AnyObject? = dict["handlingType"] else {
      assertionFailure("field 'handlingType' is missing")
      return nil
    }
    guard let handlingType: SendHandlingType = SendHandlingType.decodeJson(handlingType_field!) else {
      assertionFailure("field 'handlingType' is not a SendHandlingType")
      return nil
    }

    guard let presentationType_field: AnyObject? = dict["presentationType"] else {
      assertionFailure("field 'presentationType' is missing")
      return nil
    }
    guard let presentationType: SendPresentationType = SendPresentationType.decodeJson(presentationType_field!) else {
      assertionFailure("field 'presentationType' is not a SendPresentationType")
      return nil
    }

    guard let country_field: AnyObject? = dict["country"] else {
      assertionFailure("field 'country' is missing")
      return nil
    }
    guard let country: String = String.decodeJson(country_field!) else {
      assertionFailure("field 'country' is not a String")
      return nil
    }

    guard let fromWeight_field: AnyObject? = dict["fromWeight"] else {
      assertionFailure("field 'fromWeight' is missing")
      return nil
    }
    guard let fromWeight: Double = Double.decodeJson(fromWeight_field!) else {
      assertionFailure("field 'fromWeight' is not a Double")
      return nil
    }

    guard let averageWeight_field: AnyObject? = dict["averageWeight"] else {
      assertionFailure("field 'averageWeight' is missing")
      return nil
    }
    guard let averageWeight: Double = Double.decodeJson(averageWeight_field!) else {
      assertionFailure("field 'averageWeight' is not a Double")
      return nil
    }

    guard let toWeight_field: AnyObject? = dict["toWeight"] else {
      assertionFailure("field 'toWeight' is missing")
      return nil
    }
    guard let toWeight: Double = Double.decodeJson(toWeight_field!) else {
      assertionFailure("field 'toWeight' is not a Double")
      return nil
    }

    return SendProduct(catalogueNameKey: catalogueNameKey, productCode: productCode, productKey: productKey, productClassification: productClassification, handlingType: handlingType, presentationType: presentationType, country: country, fromWeight: fromWeight, averageWeight: averageWeight, toWeight: toWeight)
  }

  func encodeJson() -> AnyObject {
    var dict: [String: AnyObject] = [:]

    dict["catalogueNameKey"] = catalogueNameKey.encodeJson()
    dict["productCode"] = productCode.encodeJson()
    dict["productKey"] = productKey.encodeJson()
    dict["productClassification"] = productClassification.encodeJson()
    dict["handlingType"] = handlingType.encodeJson()
    dict["presentationType"] = presentationType.encodeJson()
    dict["country"] = country.encodeJson()
    dict["fromWeight"] = fromWeight.encodeJson()
    dict["averageWeight"] = averageWeight.encodeJson()
    dict["toWeight"] = toWeight.encodeJson()

    return dict
  }
}
