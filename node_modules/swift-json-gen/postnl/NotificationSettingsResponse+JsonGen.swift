//
//  NotificationSettingsResponse+JsonGen.swift
//
//  Auto generated by swift-json-gen on Thu, 06 Aug 2015 13:12:53 GMT
//

import Foundation

extension NotificationSettingsResponse {
  static func decodeJson(json: AnyObject) -> NotificationSettingsResponse? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary");
      return nil
    }

    let deviceToken_field: AnyObject? = dict["deviceToken"]
    let deviceToken: String? = deviceToken_field == nil ? nil : Optional.decodeJson({ String.decodeJson($0) }, deviceToken_field!)

    let platform_field: AnyObject? = dict["platform"]
    let platform: String? = platform_field == nil ? nil : Optional.decodeJson({ String.decodeJson($0) }, platform_field!)

    let pushNotificationToken_field: AnyObject? = dict["pushNotificationToken"]
    let pushNotificationToken: String? = pushNotificationToken_field == nil ? nil : Optional.decodeJson({ String.decodeJson($0) }, pushNotificationToken_field!)

    let active_field: AnyObject? = dict["active"]
    let active: Bool? = active_field == nil ? nil : Optional.decodeJson({ Bool.decodeJson($0) }, active_field!)

    let trackAllFutureShipments_field: AnyObject? = dict["trackAllFutureShipments"]
    let trackAllFutureShipments: Bool? = trackAllFutureShipments_field == nil ? nil : Optional.decodeJson({ Bool.decodeJson($0) }, trackAllFutureShipments_field!)

    return NotificationSettingsResponse(deviceToken: deviceToken, platform: platform, pushNotificationToken: pushNotificationToken, active: active, trackAllFutureShipments: trackAllFutureShipments)
  }

  func encodeJson() -> AnyObject {
    var dict: [String: AnyObject] = [:]

    dict["deviceToken"] = deviceToken.encodeJson({ $0.encodeJson() })
    dict["platform"] = platform.encodeJson({ $0.encodeJson() })
    dict["pushNotificationToken"] = pushNotificationToken.encodeJson({ $0.encodeJson() })
    dict["active"] = active.encodeJson({ $0.encodeJson() })
    dict["trackAllFutureShipments"] = trackAllFutureShipments.encodeJson({ $0.encodeJson() })

    return dict
  }
}
