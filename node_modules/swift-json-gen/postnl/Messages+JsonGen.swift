//
//  Messages+JsonGen.swift
//
//  Auto generated by swift-json-gen on Thu, 06 Aug 2015 13:12:53 GMT
//

import Foundation

extension Messages {
  static func decodeJson(json: AnyObject) -> Messages? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary");
      return nil
    }

    guard let notifications_field: AnyObject? = dict["notifications"] else {
      assertionFailure("field 'notifications' is missing")
      return nil
    }
    guard let notifications: [Message] = Array.decodeJson({ Message.decodeJson($0) }, notifications_field!) else {
      assertionFailure("field 'notifications' is not a [Message]")
      return nil
    }

    return Messages(notifications: notifications)
  }

  func encodeJson() -> AnyObject {
    var dict: [String: AnyObject] = [:]

    dict["notifications"] = notifications.encodeJson({ $0.encodeJson() })

    return dict
  }
}

extension Message {
  static func decodeJson(json: AnyObject) -> Message? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary");
      return nil
    }

    guard let id_field: AnyObject? = dict["id"] else {
      assertionFailure("field 'id' is missing")
      return nil
    }
    guard let id: Int = Int.decodeJson(id_field!) else {
      assertionFailure("field 'id' is not a Int")
      return nil
    }

    guard let message_field: AnyObject? = dict["message"] else {
      assertionFailure("field 'message' is missing")
      return nil
    }
    guard let message: String = String.decodeJson(message_field!) else {
      assertionFailure("field 'message' is not a String")
      return nil
    }

    return Message(id: id, message: message)
  }

  func encodeJson() -> AnyObject {
    var dict: [String: AnyObject] = [:]

    dict["id"] = id.encodeJson()
    dict["message"] = message.encodeJson()

    return dict
  }
}
