//
//  BaseAddress+JsonGen.swift
//
//  Auto generated by swift-json-gen on Thu, 06 Aug 2015 13:12:53 GMT
//

import Foundation

extension BaseAddress {
  static func decodeJson(json: AnyObject) -> BaseAddress? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary");
      return nil
    }

    guard let street_field: AnyObject? = dict["street"] else {
      assertionFailure("field 'street' is missing")
      return nil
    }
    guard let street: String = String.decodeJson(street_field!) else {
      assertionFailure("field 'street' is not a String")
      return nil
    }

    guard let houseNumber_field: AnyObject? = dict["houseNumber"] else {
      assertionFailure("field 'houseNumber' is missing")
      return nil
    }
    guard let houseNumber: String = String.decodeJson(houseNumber_field!) else {
      assertionFailure("field 'houseNumber' is not a String")
      return nil
    }

    guard let postalCode_field: AnyObject? = dict["postalCode"] else {
      assertionFailure("field 'postalCode' is missing")
      return nil
    }
    guard let postalCode: String = String.decodeJson(postalCode_field!) else {
      assertionFailure("field 'postalCode' is not a String")
      return nil
    }

    guard let town_field: AnyObject? = dict["town"] else {
      assertionFailure("field 'town' is missing")
      return nil
    }
    guard let town: String = String.decodeJson(town_field!) else {
      assertionFailure("field 'town' is not a String")
      return nil
    }

    return BaseAddress(street: street, houseNumber: houseNumber, postalCode: postalCode, town: town)
  }

  func encodeJson() -> AnyObject {
    var dict: [String: AnyObject] = [:]

    dict["street"] = street.encodeJson()
    dict["houseNumber"] = houseNumber.encodeJson()
    dict["postalCode"] = postalCode.encodeJson()
    dict["town"] = town.encodeJson()

    return dict
  }
}
