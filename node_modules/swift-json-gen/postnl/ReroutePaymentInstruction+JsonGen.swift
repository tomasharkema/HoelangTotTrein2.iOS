//
//  ReroutePaymentInstruction+JsonGen.swift
//
//  Auto generated by swift-json-gen on Thu, 06 Aug 2015 13:12:53 GMT
//

import Foundation

extension ReroutePaymentInstruction {
  static func decodeJson(json: AnyObject) -> ReroutePaymentInstruction? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary");
      return nil
    }

    guard let rerouteInstruction_field: AnyObject? = dict["rerouteInstruction"] else {
      assertionFailure("field 'rerouteInstruction' is missing")
      return nil
    }
    guard let rerouteInstruction: RerouteInstruction = RerouteInstruction.decodeJson(rerouteInstruction_field!) else {
      assertionFailure("field 'rerouteInstruction' is not a RerouteInstruction")
      return nil
    }

    guard let redirectUrl_field: AnyObject? = dict["redirectUrl"] else {
      assertionFailure("field 'redirectUrl' is missing")
      return nil
    }
    guard let redirectUrl: NSURL = NSURL.decodeJson(redirectUrl_field!) else {
      assertionFailure("field 'redirectUrl' is not a NSURL")
      return nil
    }

    guard let paymentProviders_field: AnyObject? = dict["paymentProviders"] else {
      assertionFailure("field 'paymentProviders' is missing")
      return nil
    }
    guard let paymentProviders: [PaymentProvider] = Array.decodeJson({ PaymentProvider.decodeJson($0) }, paymentProviders_field!) else {
      assertionFailure("field 'paymentProviders' is not a [PaymentProvider]")
      return nil
    }

    return ReroutePaymentInstruction(rerouteInstruction: rerouteInstruction, redirectUrl: redirectUrl, paymentProviders: paymentProviders)
  }

  func encodeJson() -> AnyObject {
    var dict: [String: AnyObject] = [:]

    dict["rerouteInstruction"] = rerouteInstruction.encodeJson()
    dict["redirectUrl"] = redirectUrl.encodeJson()
    dict["paymentProviders"] = paymentProviders.encodeJson({ $0.encodeJson() })

    return dict
  }
}

extension RerouteInstruction {
  static func decodeJson(json: AnyObject) -> RerouteInstruction? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary");
      return nil
    }

    guard let rerouteInstructionToken_field: AnyObject? = dict["rerouteInstructionToken"] else {
      assertionFailure("field 'rerouteInstructionToken' is missing")
      return nil
    }
    guard let rerouteInstructionToken: RerouteInstructionToken = RerouteInstructionToken.decodeJson(rerouteInstructionToken_field!) else {
      assertionFailure("field 'rerouteInstructionToken' is not a RerouteInstructionToken")
      return nil
    }

    return RerouteInstruction(rerouteInstructionToken: rerouteInstructionToken)
  }

  func encodeJson() -> AnyObject {
    var dict: [String: AnyObject] = [:]

    dict["rerouteInstructionToken"] = rerouteInstructionToken.encodeJson()

    return dict
  }
}

extension RerouteInstructionToken {
  static func decodeJson(json: AnyObject) -> RerouteInstructionToken? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary");
      return nil
    }

    guard let value_field: AnyObject? = dict["value"] else {
      assertionFailure("field 'value' is missing")
      return nil
    }
    guard let value: String = String.decodeJson(value_field!) else {
      assertionFailure("field 'value' is not a String")
      return nil
    }

    return RerouteInstructionToken(value: value)
  }

  func encodeJson() -> AnyObject {
    var dict: [String: AnyObject] = [:]

    dict["value"] = value.encodeJson()

    return dict
  }
}
