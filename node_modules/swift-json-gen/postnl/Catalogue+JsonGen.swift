//
//  Catalogue+JsonGen.swift
//
//  Auto generated by swift-json-gen on Thu, 06 Aug 2015 13:12:53 GMT
//

import Foundation

extension CatalogueType {
  static func decodeJson(json: AnyObject) -> CatalogueType? {
    if let value = json as? String {
      return CatalogueType(rawValue: value)
    }
    return nil
  }

  func encodeJson() -> AnyObject {
    return rawValue
  }
}

extension CataloguePrice {
  static func decodeJson(json: AnyObject) -> CataloguePrice? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary");
      return nil
    }

    let priceExcl_field: AnyObject? = dict["priceExcl"]
    let priceExcl: Int? = priceExcl_field == nil ? nil : Optional.decodeJson({ Int.decodeJson($0) }, priceExcl_field!)

    let priceIncl_field: AnyObject? = dict["priceIncl"]
    let priceIncl: Int? = priceIncl_field == nil ? nil : Optional.decodeJson({ Int.decodeJson($0) }, priceIncl_field!)

    let vat_field: AnyObject? = dict["vat"]
    let vat: String? = vat_field == nil ? nil : Optional.decodeJson({ String.decodeJson($0) }, vat_field!)

    return CataloguePrice(priceExcl: priceExcl, priceIncl: priceIncl, vat: vat)
  }

  func encodeJson() -> AnyObject {
    var dict: [String: AnyObject] = [:]

    dict["priceExcl"] = priceExcl.encodeJson({ $0.encodeJson() })
    dict["priceIncl"] = priceIncl.encodeJson({ $0.encodeJson() })
    dict["vat"] = vat.encodeJson({ $0.encodeJson() })

    return dict
  }
}

extension CatalogueProduct {
  static func decodeJson(json: AnyObject) -> CatalogueProduct? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary");
      return nil
    }

    let productClassification_field: AnyObject? = dict["productClassification"]
    let productClassification: String? = productClassification_field == nil ? nil : Optional.decodeJson({ String.decodeJson($0) }, productClassification_field!)

    guard let productCode_field: AnyObject? = dict["productCode"] else {
      assertionFailure("field 'productCode' is missing")
      return nil
    }
    guard let productCode: String = String.decodeJson(productCode_field!) else {
      assertionFailure("field 'productCode' is not a String")
      return nil
    }

    let description_field: AnyObject? = dict["description"]
    let description: String? = description_field == nil ? nil : Optional.decodeJson({ String.decodeJson($0) }, description_field!)

    let basePrice_field: AnyObject? = dict["basePrice"]
    let basePrice: CataloguePrice? = basePrice_field == nil ? nil : Optional.decodeJson({ CataloguePrice.decodeJson($0) }, basePrice_field!)

    let additionalPrice_field: AnyObject? = dict["additionalPrice"]
    let additionalPrice: CataloguePrice? = additionalPrice_field == nil ? nil : Optional.decodeJson({ CataloguePrice.decodeJson($0) }, additionalPrice_field!)

    return CatalogueProduct(productClassification: productClassification, productCode: productCode, description: description, basePrice: basePrice, additionalPrice: additionalPrice)
  }

  func encodeJson() -> AnyObject {
    var dict: [String: AnyObject] = [:]

    dict["productClassification"] = productClassification.encodeJson({ $0.encodeJson() })
    dict["productCode"] = productCode.encodeJson()
    dict["description"] = description.encodeJson({ $0.encodeJson() })
    dict["basePrice"] = basePrice.encodeJson({ $0.encodeJson() })
    dict["additionalPrice"] = additionalPrice.encodeJson({ $0.encodeJson() })

    return dict
  }
}

extension CatalogueWeightClass {
  static func decodeJson(json: AnyObject) -> CatalogueWeightClass? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary");
      return nil
    }

    let averageWeight_field: AnyObject? = dict["averageWeight"]
    let averageWeight: Double? = averageWeight_field == nil ? nil : Optional.decodeJson({ Double.decodeJson($0) }, averageWeight_field!)

    let fromWeight_field: AnyObject? = dict["fromWeight"]
    let fromWeight: Double? = fromWeight_field == nil ? nil : Optional.decodeJson({ Double.decodeJson($0) }, fromWeight_field!)

    let toWeight_field: AnyObject? = dict["toWeight"]
    let toWeight: Double? = toWeight_field == nil ? nil : Optional.decodeJson({ Double.decodeJson($0) }, toWeight_field!)

    let caption_field: AnyObject? = dict["caption"]
    let caption: String? = caption_field == nil ? nil : Optional.decodeJson({ String.decodeJson($0) }, caption_field!)

    let presentationType_field: AnyObject? = dict["presentationType"]
    let presentationType: String? = presentationType_field == nil ? nil : Optional.decodeJson({ String.decodeJson($0) }, presentationType_field!)

    guard let products_field: AnyObject? = dict["products"] else {
      assertionFailure("field 'products' is missing")
      return nil
    }
    guard let products: [CatalogueProduct] = Array.decodeJson({ CatalogueProduct.decodeJson($0) }, products_field!) else {
      assertionFailure("field 'products' is not a [CatalogueProduct]")
      return nil
    }

    return CatalogueWeightClass(averageWeight: averageWeight, fromWeight: fromWeight, toWeight: toWeight, caption: caption, presentationType: presentationType, products: products)
  }

  func encodeJson() -> AnyObject {
    var dict: [String: AnyObject] = [:]

    dict["averageWeight"] = averageWeight.encodeJson({ $0.encodeJson() })
    dict["fromWeight"] = fromWeight.encodeJson({ $0.encodeJson() })
    dict["toWeight"] = toWeight.encodeJson({ $0.encodeJson() })
    dict["caption"] = caption.encodeJson({ $0.encodeJson() })
    dict["presentationType"] = presentationType.encodeJson({ $0.encodeJson() })
    dict["products"] = products.encodeJson({ $0.encodeJson() })

    return dict
  }
}

extension CatalogueCountry {
  static func decodeJson(json: AnyObject) -> CatalogueCountry? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary");
      return nil
    }

    let isoCode_field: AnyObject? = dict["isoCode"]
    let isoCode: String? = isoCode_field == nil ? nil : Optional.decodeJson({ String.decodeJson($0) }, isoCode_field!)

    let regionCode_field: AnyObject? = dict["regionCode"]
    let regionCode: String? = regionCode_field == nil ? nil : Optional.decodeJson({ String.decodeJson($0) }, regionCode_field!)

    let note_field: AnyObject? = dict["note"]
    let note: String? = note_field == nil ? nil : Optional.decodeJson({ String.decodeJson($0) }, note_field!)

    return CatalogueCountry(isoCode: isoCode, regionCode: regionCode, note: note)
  }

  func encodeJson() -> AnyObject {
    var dict: [String: AnyObject] = [:]

    dict["isoCode"] = isoCode.encodeJson({ $0.encodeJson() })
    dict["regionCode"] = regionCode.encodeJson({ $0.encodeJson() })
    dict["note"] = note.encodeJson({ $0.encodeJson() })

    return dict
  }
}

extension CatalogueRegion {
  static func decodeJson(json: AnyObject) -> CatalogueRegion? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary");
      return nil
    }

    let regionCode_field: AnyObject? = dict["regionCode"]
    let regionCode: String? = regionCode_field == nil ? nil : Optional.decodeJson({ String.decodeJson($0) }, regionCode_field!)

    guard let weightClasses_field: AnyObject? = dict["weightClasses"] else {
      assertionFailure("field 'weightClasses' is missing")
      return nil
    }
    guard let weightClasses: [CatalogueWeightClass] = Array.decodeJson({ CatalogueWeightClass.decodeJson($0) }, weightClasses_field!) else {
      assertionFailure("field 'weightClasses' is not a [CatalogueWeightClass]")
      return nil
    }

    return CatalogueRegion(regionCode: regionCode, weightClasses: weightClasses)
  }

  func encodeJson() -> AnyObject {
    var dict: [String: AnyObject] = [:]

    dict["regionCode"] = regionCode.encodeJson({ $0.encodeJson() })
    dict["weightClasses"] = weightClasses.encodeJson({ $0.encodeJson() })

    return dict
  }
}

extension CatalogueResponse {
  static func decodeJson(json: AnyObject) -> CatalogueResponse? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary");
      return nil
    }

    guard let countries_field: AnyObject? = dict["countries"] else {
      assertionFailure("field 'countries' is missing")
      return nil
    }
    guard let countries: [CatalogueCountry] = Array.decodeJson({ CatalogueCountry.decodeJson($0) }, countries_field!) else {
      assertionFailure("field 'countries' is not a [CatalogueCountry]")
      return nil
    }

    guard let regions_field: AnyObject? = dict["regions"] else {
      assertionFailure("field 'regions' is missing")
      return nil
    }
    guard let regions: [CatalogueRegion] = Array.decodeJson({ CatalogueRegion.decodeJson($0) }, regions_field!) else {
      assertionFailure("field 'regions' is not a [CatalogueRegion]")
      return nil
    }

    return CatalogueResponse(countries: countries, regions: regions)
  }

  func encodeJson() -> AnyObject {
    var dict: [String: AnyObject] = [:]

    dict["countries"] = countries.encodeJson({ $0.encodeJson() })
    dict["regions"] = regions.encodeJson({ $0.encodeJson() })

    return dict
  }
}
