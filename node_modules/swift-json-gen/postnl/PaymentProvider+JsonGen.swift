//
//  PaymentProvider+JsonGen.swift
//
//  Auto generated by swift-json-gen on Thu, 06 Aug 2015 13:12:53 GMT
//

import Foundation

extension PaymentStatus {
  static func decodeJson(json: AnyObject) -> PaymentStatus? {
    if let value = json as? String {
      return PaymentStatus(rawValue: value)
    }
    return nil
  }

  func encodeJson() -> AnyObject {
    return rawValue
  }
}

extension PaymentProvider {
  static func decodeJson(json: AnyObject) -> PaymentProvider? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary");
      return nil
    }

    guard let brandCode_field: AnyObject? = dict["brandCode"] else {
      assertionFailure("field 'brandCode' is missing")
      return nil
    }
    guard let brandCode: String = String.decodeJson(brandCode_field!) else {
      assertionFailure("field 'brandCode' is not a String")
      return nil
    }

    guard let issuers_field: AnyObject? = dict["issuers"] else {
      assertionFailure("field 'issuers' is missing")
      return nil
    }
    guard let issuers: [PaymentProviderIssuer] = Array.decodeJson({ PaymentProviderIssuer.decodeJson($0) }, issuers_field!) else {
      assertionFailure("field 'issuers' is not a [PaymentProviderIssuer]")
      return nil
    }

    return PaymentProvider(brandCode: brandCode, issuers: issuers)
  }

  func encodeJson() -> AnyObject {
    var dict: [String: AnyObject] = [:]

    dict["brandCode"] = brandCode.encodeJson()
    dict["issuers"] = issuers.encodeJson({ $0.encodeJson() })

    return dict
  }
}

extension PaymentProviderIssuer {
  static func decodeJson(json: AnyObject) -> PaymentProviderIssuer? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary");
      return nil
    }

    guard let issuerId_field: AnyObject? = dict["issuerId"] else {
      assertionFailure("field 'issuerId' is missing")
      return nil
    }
    guard let issuerId: String = String.decodeJson(issuerId_field!) else {
      assertionFailure("field 'issuerId' is not a String")
      return nil
    }

    guard let name_field: AnyObject? = dict["name"] else {
      assertionFailure("field 'name' is missing")
      return nil
    }
    guard let name: String = String.decodeJson(name_field!) else {
      assertionFailure("field 'name' is not a String")
      return nil
    }

    return PaymentProviderIssuer(issuerId: issuerId, name: name)
  }

  func encodeJson() -> AnyObject {
    var dict: [String: AnyObject] = [:]

    dict["issuerId"] = issuerId.encodeJson()
    dict["name"] = name.encodeJson()

    return dict
  }
}
