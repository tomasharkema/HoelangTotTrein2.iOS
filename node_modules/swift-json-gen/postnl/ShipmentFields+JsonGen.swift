//
//  ShipmentFields+JsonGen.swift
//
//  Auto generated by swift-json-gen on Thu, 06 Aug 2015 13:12:53 GMT
//

import Foundation

extension ShipmentFields {
  static func decodeJson(json: AnyObject) -> ShipmentFields? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary");
      return nil
    }

    guard let amounts_field: AnyObject? = dict["amounts"] else {
      assertionFailure("field 'amounts' is missing")
      return nil
    }
    guard let amounts: AmountsJson = AmountsJson.decodeJson(amounts_field!) else {
      assertionFailure("field 'amounts' is not a AmountsJson")
      return nil
    }

    guard let extraInformation_field: AnyObject? = dict["extraInformation"] else {
      assertionFailure("field 'extraInformation' is missing")
      return nil
    }
    guard let extraInformation: [ExtraInformationJson] = Array.decodeJson({ ExtraInformationJson.decodeJson($0) }, extraInformation_field!) else {
      assertionFailure("field 'extraInformation' is not a [ExtraInformationJson]")
      return nil
    }

    guard let notifications_field: AnyObject? = dict["notifications"] else {
      assertionFailure("field 'notifications' is missing")
      return nil
    }
    guard let notifications: Messages = Messages.decodeJson(notifications_field!) else {
      assertionFailure("field 'notifications' is not a Messages")
      return nil
    }

    return ShipmentFields(amounts: amounts, extraInformation: extraInformation, notifications: notifications)
  }

  func encodeJson() -> AnyObject {
    var dict: [String: AnyObject] = [:]

    dict["amounts"] = amounts.encodeJson()
    dict["extraInformation"] = extraInformation.encodeJson({ $0.encodeJson() })
    dict["notifications"] = notifications.encodeJson()

    return dict
  }
}

extension AmountsJson {
  static func decodeJson(json: AnyObject) -> AmountsJson? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary");
      return nil
    }

    let reimbursement_field: AnyObject? = dict["reimbursement"]
    let reimbursement: Int? = reimbursement_field == nil ? nil : Optional.decodeJson({ Int.decodeJson($0) }, reimbursement_field!)

    let insured_field: AnyObject? = dict["insured"]
    let insured: Int? = insured_field == nil ? nil : Optional.decodeJson({ Int.decodeJson($0) }, insured_field!)

    return AmountsJson(reimbursement: reimbursement, insured: insured)
  }

  func encodeJson() -> AnyObject {
    var dict: [String: AnyObject] = [:]

    dict["reimbursement"] = reimbursement.encodeJson({ $0.encodeJson() })
    dict["insured"] = insured.encodeJson({ $0.encodeJson() })

    return dict
  }
}

extension ExtraInformationJson {
  static func decodeJson(json: AnyObject) -> ExtraInformationJson? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary");
      return nil
    }

    guard let data_field: AnyObject? = dict["data"] else {
      assertionFailure("field 'data' is missing")
      return nil
    }
    guard let data: ExtraInformationDataJson = ExtraInformationDataJson.decodeJson(data_field!) else {
      assertionFailure("field 'data' is not a ExtraInformationDataJson")
      return nil
    }

    guard let type_field: AnyObject? = dict["type"] else {
      assertionFailure("field 'type' is missing")
      return nil
    }
    guard let type: String = String.decodeJson(type_field!) else {
      assertionFailure("field 'type' is not a String")
      return nil
    }

    return ExtraInformationJson(data: data, type: type)
  }

  func encodeJson() -> AnyObject {
    var dict: [String: AnyObject] = [:]

    dict["data"] = data.encodeJson()
    dict["type"] = type.encodeJson()

    return dict
  }
}

extension ExtraInformationDataJson {
  static func decodeJson(json: AnyObject) -> ExtraInformationDataJson? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary");
      return nil
    }

    let amount_field: AnyObject? = dict["amount"]
    let amount: Int? = amount_field == nil ? nil : Optional.decodeJson({ Int.decodeJson($0) }, amount_field!)

    let text_field: AnyObject? = dict["text"]
    let text: String? = text_field == nil ? nil : Optional.decodeJson({ String.decodeJson($0) }, text_field!)

    return ExtraInformationDataJson(amount: amount, text: text)
  }

  func encodeJson() -> AnyObject {
    var dict: [String: AnyObject] = [:]

    dict["amount"] = amount.encodeJson({ $0.encodeJson() })
    dict["text"] = text.encodeJson({ $0.encodeJson() })

    return dict
  }
}
