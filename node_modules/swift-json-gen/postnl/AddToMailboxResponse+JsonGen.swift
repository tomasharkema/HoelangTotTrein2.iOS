//
//  AddToMailboxResponse+JsonGen.swift
//
//  Auto generated by swift-json-gen on Thu, 06 Aug 2015 13:12:53 GMT
//

import Foundation

extension AddToMailboxResponse {
  static func decodeJson(json: AnyObject) -> AddToMailboxResponse? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary");
      return nil
    }

    guard let results_field: AnyObject? = dict["results"] else {
      assertionFailure("field 'results' is missing")
      return nil
    }
    guard let results: [AddToMailboxResult] = Array.decodeJson({ AddToMailboxResult.decodeJson($0) }, results_field!) else {
      assertionFailure("field 'results' is not a [AddToMailboxResult]")
      return nil
    }

    return AddToMailboxResponse(results: results)
  }

  func encodeJson() -> AnyObject {
    var dict: [String: AnyObject] = [:]

    dict["results"] = results.encodeJson({ $0.encodeJson() })

    return dict
  }
}

extension AddToMailboxResult {
  static func decodeJson(json: AnyObject) -> AddToMailboxResult? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary");
      return nil
    }

    let errorMessage_field: AnyObject? = dict["errorMessage"]
    let errorMessage: String? = errorMessage_field == nil ? nil : Optional.decodeJson({ String.decodeJson($0) }, errorMessage_field!)

    guard let imposeable_field: AnyObject? = dict["imposeable"] else {
      assertionFailure("field 'imposeable' is missing")
      return nil
    }
    guard let imposeable: Bool = Bool.decodeJson(imposeable_field!) else {
      assertionFailure("field 'imposeable' is not a Bool")
      return nil
    }

    let trackedShipment_field: AnyObject? = dict["trackedShipment"]
    let trackedShipment: [String : AnyObject]? = trackedShipment_field == nil ? nil : Optional.decodeJson({ $0 as? JsonObject }, trackedShipment_field!)

    return AddToMailboxResult(errorMessage: errorMessage, imposeable: imposeable, trackedShipment: trackedShipment)
  }

  func encodeJson() -> AnyObject {
    var dict: [String: AnyObject] = [:]

    dict["errorMessage"] = errorMessage.encodeJson({ $0.encodeJson() })
    dict["imposeable"] = imposeable.encodeJson()
    dict["trackedShipment"] = trackedShipment.encodeJson({ $0.encodeJson({ $0.encodeJson() }, { $0 }) })

    return dict
  }
}
