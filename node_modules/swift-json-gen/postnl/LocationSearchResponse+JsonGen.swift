//
//  LocationSearchResponse+JsonGen.swift
//
//  Auto generated by swift-json-gen on Thu, 06 Aug 2015 13:12:53 GMT
//

import Foundation

extension Day {
  static func decodeJson(json: AnyObject) -> Day? {
    if let value = json as? String {
      return Day(rawValue: value)
    }
    return nil
  }

  func encodeJson() -> AnyObject {
    return rawValue
  }
}

extension LocationSearchResponse {
  static func decodeJson(json: AnyObject) -> LocationSearchResponse? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary");
      return nil
    }

    guard let locations_field: AnyObject? = dict["locations"] else {
      assertionFailure("field 'locations' is missing")
      return nil
    }
    guard let locations: [Location] = Array.decodeJson({ Location.decodeJson($0) }, locations_field!) else {
      assertionFailure("field 'locations' is not a [Location]")
      return nil
    }

    return LocationSearchResponse(locations: locations)
  }

  func encodeJson() -> AnyObject {
    var dict: [String: AnyObject] = [:]

    dict["locations"] = locations.encodeJson({ $0.encodeJson() })

    return dict
  }
}

extension Location {
  static func decodeJson(json: AnyObject) -> Location? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary");
      return nil
    }

    guard let locationType_field: AnyObject? = dict["locationType"] else {
      assertionFailure("field 'locationType' is missing")
      return nil
    }
    guard let locationType: String = String.decodeJson(locationType_field!) else {
      assertionFailure("field 'locationType' is not a String")
      return nil
    }

    guard let partnerId_field: AnyObject? = dict["partnerId"] else {
      assertionFailure("field 'partnerId' is missing")
      return nil
    }
    guard let partnerId: String = String.decodeJson(partnerId_field!) else {
      assertionFailure("field 'partnerId' is not a String")
      return nil
    }

    guard let locationId_field: AnyObject? = dict["locationId"] else {
      assertionFailure("field 'locationId' is missing")
      return nil
    }
    guard let locationId: String = String.decodeJson(locationId_field!) else {
      assertionFailure("field 'locationId' is not a String")
      return nil
    }

    guard let blsCode_field: AnyObject? = dict["blsCode"] else {
      assertionFailure("field 'blsCode' is missing")
      return nil
    }
    guard let blsCode: String = String.decodeJson(blsCode_field!) else {
      assertionFailure("field 'blsCode' is not a String")
      return nil
    }

    guard let name_field: AnyObject? = dict["name"] else {
      assertionFailure("field 'name' is missing")
      return nil
    }
    guard let name: String = String.decodeJson(name_field!) else {
      assertionFailure("field 'name' is not a String")
      return nil
    }

    guard let address_field: AnyObject? = dict["address"] else {
      assertionFailure("field 'address' is missing")
      return nil
    }
    guard let address: LocationAddress = LocationAddress.decodeJson(address_field!) else {
      assertionFailure("field 'address' is not a LocationAddress")
      return nil
    }

    guard let phoneNumber_field: AnyObject? = dict["phoneNumber"] else {
      assertionFailure("field 'phoneNumber' is missing")
      return nil
    }
    guard let phoneNumber: String = String.decodeJson(phoneNumber_field!) else {
      assertionFailure("field 'phoneNumber' is not a String")
      return nil
    }

    guard let coordinate_field: AnyObject? = dict["coordinate"] else {
      assertionFailure("field 'coordinate' is missing")
      return nil
    }
    guard let coordinate: LocationCoordinate = LocationCoordinate.decodeJson(coordinate_field!) else {
      assertionFailure("field 'coordinate' is not a LocationCoordinate")
      return nil
    }

    guard let businessHours_field: AnyObject? = dict["businessHours"] else {
      assertionFailure("field 'businessHours' is missing")
      return nil
    }
    guard let businessHours: [LocationBusinessDay] = Array.decodeJson({ LocationBusinessDay.decodeJson($0) }, businessHours_field!) else {
      assertionFailure("field 'businessHours' is not a [LocationBusinessDay]")
      return nil
    }

    guard let services_field: AnyObject? = dict["services"] else {
      assertionFailure("field 'services' is missing")
      return nil
    }
    guard let services: [String] = Array.decodeJson({ String.decodeJson($0) }, services_field!) else {
      assertionFailure("field 'services' is not a [String]")
      return nil
    }

    return Location(locationType: locationType, partnerId: partnerId, locationId: locationId, blsCode: blsCode, name: name, address: address, phoneNumber: phoneNumber, coordinate: coordinate, businessHours: businessHours, services: services)
  }

  func encodeJson() -> AnyObject {
    var dict: [String: AnyObject] = [:]

    dict["locationType"] = locationType.encodeJson()
    dict["partnerId"] = partnerId.encodeJson()
    dict["locationId"] = locationId.encodeJson()
    dict["blsCode"] = blsCode.encodeJson()
    dict["name"] = name.encodeJson()
    dict["address"] = address.encodeJson()
    dict["phoneNumber"] = phoneNumber.encodeJson()
    dict["coordinate"] = coordinate.encodeJson()
    dict["businessHours"] = businessHours.encodeJson({ $0.encodeJson() })
    dict["services"] = services.encodeJson({ $0.encodeJson() })

    return dict
  }
}

extension LocationAddress {
  static func decodeJson(json: AnyObject) -> LocationAddress? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary");
      return nil
    }

    guard let street_field: AnyObject? = dict["street"] else {
      assertionFailure("field 'street' is missing")
      return nil
    }
    guard let street: String = String.decodeJson(street_field!) else {
      assertionFailure("field 'street' is not a String")
      return nil
    }

    guard let houseNumber_field: AnyObject? = dict["houseNumber"] else {
      assertionFailure("field 'houseNumber' is missing")
      return nil
    }
    guard let houseNumber: String = String.decodeJson(houseNumber_field!) else {
      assertionFailure("field 'houseNumber' is not a String")
      return nil
    }

    guard let houseNumberSuffix_field: AnyObject? = dict["houseNumberSuffix"] else {
      assertionFailure("field 'houseNumberSuffix' is missing")
      return nil
    }
    guard let houseNumberSuffix: String = String.decodeJson(houseNumberSuffix_field!) else {
      assertionFailure("field 'houseNumberSuffix' is not a String")
      return nil
    }

    guard let postalCode_field: AnyObject? = dict["postalCode"] else {
      assertionFailure("field 'postalCode' is missing")
      return nil
    }
    guard let postalCode: String = String.decodeJson(postalCode_field!) else {
      assertionFailure("field 'postalCode' is not a String")
      return nil
    }

    guard let town_field: AnyObject? = dict["town"] else {
      assertionFailure("field 'town' is missing")
      return nil
    }
    guard let town: String = String.decodeJson(town_field!) else {
      assertionFailure("field 'town' is not a String")
      return nil
    }

    guard let country_field: AnyObject? = dict["country"] else {
      assertionFailure("field 'country' is missing")
      return nil
    }
    guard let country: String = String.decodeJson(country_field!) else {
      assertionFailure("field 'country' is not a String")
      return nil
    }

    return LocationAddress(street: street, houseNumber: houseNumber, houseNumberSuffix: houseNumberSuffix, postalCode: postalCode, town: town, country: country)
  }

  func encodeJson() -> AnyObject {
    var dict: [String: AnyObject] = [:]

    dict["street"] = street.encodeJson()
    dict["houseNumber"] = houseNumber.encodeJson()
    dict["houseNumberSuffix"] = houseNumberSuffix.encodeJson()
    dict["postalCode"] = postalCode.encodeJson()
    dict["town"] = town.encodeJson()
    dict["country"] = country.encodeJson()

    return dict
  }
}

extension LocationCoordinate {
  static func decodeJson(json: AnyObject) -> LocationCoordinate? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary");
      return nil
    }

    guard let latitude_field: AnyObject? = dict["latitude"] else {
      assertionFailure("field 'latitude' is missing")
      return nil
    }
    guard let latitude: Double = Double.decodeJson(latitude_field!) else {
      assertionFailure("field 'latitude' is not a Double")
      return nil
    }

    guard let longitude_field: AnyObject? = dict["longitude"] else {
      assertionFailure("field 'longitude' is missing")
      return nil
    }
    guard let longitude: Double = Double.decodeJson(longitude_field!) else {
      assertionFailure("field 'longitude' is not a Double")
      return nil
    }

    return LocationCoordinate(latitude: latitude, longitude: longitude)
  }

  func encodeJson() -> AnyObject {
    var dict: [String: AnyObject] = [:]

    dict["latitude"] = latitude.encodeJson()
    dict["longitude"] = longitude.encodeJson()

    return dict
  }
}

extension LocationBusinessDay {
  static func decodeJson(json: AnyObject) -> LocationBusinessDay? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary");
      return nil
    }

    guard let day_field: AnyObject? = dict["day"] else {
      assertionFailure("field 'day' is missing")
      return nil
    }
    guard let day: Day = Day.decodeJson(day_field!) else {
      assertionFailure("field 'day' is not a Day")
      return nil
    }

    guard let hours_field: AnyObject? = dict["hours"] else {
      assertionFailure("field 'hours' is missing")
      return nil
    }
    guard let hours: [LocationBusinessHours] = Array.decodeJson({ LocationBusinessHours.decodeJson($0) }, hours_field!) else {
      assertionFailure("field 'hours' is not a [LocationBusinessHours]")
      return nil
    }

    return LocationBusinessDay(day: day, hours: hours)
  }

  func encodeJson() -> AnyObject {
    var dict: [String: AnyObject] = [:]

    dict["day"] = day.encodeJson()
    dict["hours"] = hours.encodeJson({ $0.encodeJson() })

    return dict
  }
}

extension LocationBusinessHours {
  static func decodeJson(json: AnyObject) -> LocationBusinessHours? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary");
      return nil
    }

    guard let from_field: AnyObject? = dict["from"] else {
      assertionFailure("field 'from' is missing")
      return nil
    }
    guard let from: String = String.decodeJson(from_field!) else {
      assertionFailure("field 'from' is not a String")
      return nil
    }

    guard let to_field: AnyObject? = dict["to"] else {
      assertionFailure("field 'to' is missing")
      return nil
    }
    guard let to: String = String.decodeJson(to_field!) else {
      assertionFailure("field 'to' is not a String")
      return nil
    }

    return LocationBusinessHours(from: from, to: to)
  }

  func encodeJson() -> AnyObject {
    var dict: [String: AnyObject] = [:]

    dict["from"] = from.encodeJson()
    dict["to"] = to.encodeJson()

    return dict
  }
}
