//
//  LocationSearchResponse.swift
//  PostNL
//
//  Created by Mathijs Kadijk on 09-12-14.
//  Copyright (c) 2014 PostNL. All rights reserved.
//

import Foundation
import CoreLocation

struct LocationSearchResponse {
  let locations: [Location]
}

struct Location {
  let locationType: String

  let partnerId: String
  let locationId: String
  let blsCode: String

  let name: String
  let address: LocationAddress
  let phoneNumber: String
  let coordinate: LocationCoordinate

  let businessHours: [LocationBusinessDay]
  let services: [String]
  
  var formatOpeningHoursForToday: String {
    let day = Day.currentDay
    
    let periods = businessHours.filter { $0.day == day }.first!.hours.map { $0.from + "-" + $0.to }
    
    return businessHours.count == 0 ? NSLocalizedString("Vandaag gesloten", comment: "Kaart locatie gesloten")  : NSLocalizedString("Geopend van ", comment: "Kaart locatie geopend van") + ", ".join(periods)
  }
}

struct LocationAddress {
  let street: String
  let houseNumber: String
  let houseNumberSuffix: String
  let postalCode: String
  let town: String
  let country: String
}

struct LocationCoordinate {
  let latitude: Double
  let longitude: Double

  var coreLocationCoordinate: CLLocationCoordinate2D {
    return CLLocationCoordinate2D(latitude: latitude, longitude: longitude)
  }
}

enum Day: String {
  case Monday = "Monday"
  case Tuesday = "Tuesday"
  case Wednesday = "Wednesday"
  case Thursday = "Thursday"
  case Friday = "Friday"
  case Saturday = "Saturday"
  case Sunday = "Sunday"
  
  private static let values: [Day] = [.Monday, .Tuesday, .Wednesday, .Thursday, .Friday, .Saturday, .Sunday]
  
  static func fromString(string: String) -> Day? {
    return values.filter { $0.rawValue == string || $0.abbriviation == string }.first
  }
  
  static var currentDay: Day {
    let calendar = NSCalendar()
    let components = calendar.components(.CalendarUnitWeekday, fromDate: NSDate())
    let weekDay = components.weekday
    return values[weekDay]
  }
  
  var abbriviation: String {
    switch self {
    case .Monday:
      return "Ma"
    case .Tuesday:
      return "Di"
    case .Wednesday:
      return "Wo"
    case .Thursday:
      return "Do"
    case .Friday:
      return "Vr"
    case .Saturday:
      return "Za"
    case .Sunday:
      return "Zo"
    }
  }
}

struct LocationBusinessDay {
  let day: Day
  let hours: [LocationBusinessHours]
}

struct LocationBusinessHours {
  let from: String
  let to: String
}
