//
//  SendOrderRequest+JsonGen.swift
//
//  Auto generated by swift-json-gen on Thu, 06 Aug 2015 13:12:53 GMT
//

import Foundation

extension SendOrderRequestProduct {
  static func decodeJson(json: AnyObject) -> SendOrderRequestProduct? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary");
      return nil
    }

    guard let catalogueNameKey_field: AnyObject? = dict["catalogueNameKey"] else {
      assertionFailure("field 'catalogueNameKey' is missing")
      return nil
    }
    guard let catalogueNameKey: String = String.decodeJson(catalogueNameKey_field!) else {
      assertionFailure("field 'catalogueNameKey' is not a String")
      return nil
    }

    guard let country_field: AnyObject? = dict["country"] else {
      assertionFailure("field 'country' is missing")
      return nil
    }
    guard let country: String = String.decodeJson(country_field!) else {
      assertionFailure("field 'country' is not a String")
      return nil
    }

    guard let averageWeight_field: AnyObject? = dict["averageWeight"] else {
      assertionFailure("field 'averageWeight' is missing")
      return nil
    }
    guard let averageWeight: Double = Double.decodeJson(averageWeight_field!) else {
      assertionFailure("field 'averageWeight' is not a Double")
      return nil
    }

    guard let productCode_field: AnyObject? = dict["productCode"] else {
      assertionFailure("field 'productCode' is missing")
      return nil
    }
    guard let productCode: String = String.decodeJson(productCode_field!) else {
      assertionFailure("field 'productCode' is not a String")
      return nil
    }

    return SendOrderRequestProduct(catalogueNameKey: catalogueNameKey, country: country, averageWeight: averageWeight, productCode: productCode)
  }

  func encodeJson() -> AnyObject {
    var dict: [String: AnyObject] = [:]

    dict["catalogueNameKey"] = catalogueNameKey.encodeJson()
    dict["country"] = country.encodeJson()
    dict["averageWeight"] = averageWeight.encodeJson()
    dict["productCode"] = productCode.encodeJson()

    return dict
  }
}

extension SendOrderRequestShipment {
  static func decodeJson(json: AnyObject) -> SendOrderRequestShipment? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary");
      return nil
    }

    guard let product_field: AnyObject? = dict["product"] else {
      assertionFailure("field 'product' is missing")
      return nil
    }
    guard let product: SendOrderRequestProduct = SendOrderRequestProduct.decodeJson(product_field!) else {
      assertionFailure("field 'product' is not a SendOrderRequestProduct")
      return nil
    }

    guard let deliveryAddress_field: AnyObject? = dict["deliveryAddress"] else {
      assertionFailure("field 'deliveryAddress' is missing")
      return nil
    }
    guard let deliveryAddress: SendAddress = SendAddress.decodeJson(deliveryAddress_field!) else {
      assertionFailure("field 'deliveryAddress' is not a SendAddress")
      return nil
    }

    return SendOrderRequestShipment(product: product, deliveryAddress: deliveryAddress)
  }

  func encodeJson() -> AnyObject {
    var dict: [String: AnyObject] = [:]

    dict["product"] = product.encodeJson()
    dict["deliveryAddress"] = deliveryAddress.encodeJson()

    return dict
  }
}

extension SendOrderRequest {
  static func decodeJson(json: AnyObject) -> SendOrderRequest? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary");
      return nil
    }

    guard let senderAddress_field: AnyObject? = dict["senderAddress"] else {
      assertionFailure("field 'senderAddress' is missing")
      return nil
    }
    guard let senderAddress: SendAddress = SendAddress.decodeJson(senderAddress_field!) else {
      assertionFailure("field 'senderAddress' is not a SendAddress")
      return nil
    }

    guard let shipments_field: AnyObject? = dict["shipments"] else {
      assertionFailure("field 'shipments' is missing")
      return nil
    }
    guard let shipments: [SendOrderRequestShipment] = Array.decodeJson({ SendOrderRequestShipment.decodeJson($0) }, shipments_field!) else {
      assertionFailure("field 'shipments' is not a [SendOrderRequestShipment]")
      return nil
    }

    guard let agreedToTerms_field: AnyObject? = dict["agreedToTerms"] else {
      assertionFailure("field 'agreedToTerms' is missing")
      return nil
    }
    guard let agreedToTerms: Bool = Bool.decodeJson(agreedToTerms_field!) else {
      assertionFailure("field 'agreedToTerms' is not a Bool")
      return nil
    }

    return SendOrderRequest(senderAddress: senderAddress, shipments: shipments, agreedToTerms: agreedToTerms)
  }

  func encodeJson() -> AnyObject {
    var dict: [String: AnyObject] = [:]

    dict["senderAddress"] = senderAddress.encodeJson()
    dict["shipments"] = shipments.encodeJson({ $0.encodeJson() })
    dict["agreedToTerms"] = agreedToTerms.encodeJson()

    return dict
  }
}
