//
//  TokenResponse+JsonGen.swift
//
//  Auto generated by swift-json-gen on Thu, 06 Aug 2015 13:12:53 GMT
//

import Foundation

extension TokenResponse {
  static func decodeJson(json: AnyObject) -> TokenResponse? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary");
      return nil
    }

    guard let access_token_field: AnyObject? = dict["access_token"] else {
      assertionFailure("field 'access_token' is missing")
      return nil
    }
    guard let access_token: String = String.decodeJson(access_token_field!) else {
      assertionFailure("field 'access_token' is not a String")
      return nil
    }

    guard let token_type_field: AnyObject? = dict["token_type"] else {
      assertionFailure("field 'token_type' is missing")
      return nil
    }
    guard let token_type: String = String.decodeJson(token_type_field!) else {
      assertionFailure("field 'token_type' is not a String")
      return nil
    }

    guard let expires_in_field: AnyObject? = dict["expires_in"] else {
      assertionFailure("field 'expires_in' is missing")
      return nil
    }
    guard let expires_in: Int = Int.decodeJson(expires_in_field!) else {
      assertionFailure("field 'expires_in' is not a Int")
      return nil
    }

    guard let refresh_token_field: AnyObject? = dict["refresh_token"] else {
      assertionFailure("field 'refresh_token' is missing")
      return nil
    }
    guard let refresh_token: String = String.decodeJson(refresh_token_field!) else {
      assertionFailure("field 'refresh_token' is not a String")
      return nil
    }

    return TokenResponse(access_token: access_token, token_type: token_type, expires_in: expires_in, refresh_token: refresh_token)
  }

  func encodeJson() -> AnyObject {
    var dict: [String: AnyObject] = [:]

    dict["access_token"] = access_token.encodeJson()
    dict["token_type"] = token_type.encodeJson()
    dict["expires_in"] = expires_in.encodeJson()
    dict["refresh_token"] = refresh_token.encodeJson()

    return dict
  }
}
