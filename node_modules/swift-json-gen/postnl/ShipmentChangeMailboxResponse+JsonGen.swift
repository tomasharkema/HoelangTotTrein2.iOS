//
//  ShipmentChangeMailboxResponse+JsonGen.swift
//
//  Auto generated by swift-json-gen on Thu, 06 Aug 2015 13:12:53 GMT
//

import Foundation

extension ShipmentChangeMailboxResponse {
  static func decodeJson(json: AnyObject) -> ShipmentChangeMailboxResponse? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary");
      return nil
    }

    guard let sender_field: AnyObject? = dict["sender"] else {
      assertionFailure("field 'sender' is missing")
      return nil
    }
    guard let sender: [ShipmentChangeResult] = Array.decodeJson({ ShipmentChangeResult.decodeJson($0) }, sender_field!) else {
      assertionFailure("field 'sender' is not a [ShipmentChangeResult]")
      return nil
    }

    guard let receiver_field: AnyObject? = dict["receiver"] else {
      assertionFailure("field 'receiver' is missing")
      return nil
    }
    guard let receiver: [ShipmentChangeResult] = Array.decodeJson({ ShipmentChangeResult.decodeJson($0) }, receiver_field!) else {
      assertionFailure("field 'receiver' is not a [ShipmentChangeResult]")
      return nil
    }

    return ShipmentChangeMailboxResponse(sender: sender, receiver: receiver)
  }

  func encodeJson() -> AnyObject {
    var dict: [String: AnyObject] = [:]

    dict["sender"] = sender.encodeJson({ $0.encodeJson() })
    dict["receiver"] = receiver.encodeJson({ $0.encodeJson() })

    return dict
  }
}

extension ShipmentChangeResult {
  static func decodeJson(json: AnyObject) -> ShipmentChangeResult? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary");
      return nil
    }

    let errorMessage_field: AnyObject? = dict["errorMessage"]
    let errorMessage: String? = errorMessage_field == nil ? nil : Optional.decodeJson({ String.decodeJson($0) }, errorMessage_field!)

    guard let id_field: AnyObject? = dict["id"] else {
      assertionFailure("field 'id' is missing")
      return nil
    }
    guard let id: Int = Int.decodeJson(id_field!) else {
      assertionFailure("field 'id' is not a Int")
      return nil
    }

    return ShipmentChangeResult(errorMessage: errorMessage, id: id)
  }

  func encodeJson() -> AnyObject {
    var dict: [String: AnyObject] = [:]

    dict["errorMessage"] = errorMessage.encodeJson({ $0.encodeJson() })
    dict["id"] = id.encodeJson()

    return dict
  }
}
