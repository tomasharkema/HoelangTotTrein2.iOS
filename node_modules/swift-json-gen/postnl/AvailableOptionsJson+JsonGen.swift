//
//  AvailableOptionsJson+JsonGen.swift
//
//  Auto generated by swift-json-gen on Thu, 06 Aug 2015 13:12:53 GMT
//

import Foundation

extension AvailableOptionsJson {
  static func decodeJson(json: AnyObject) -> AvailableOptionsJson? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary");
      return nil
    }

    let otherDay_field: AnyObject? = dict["otherDay"]
    let otherDay: OtherDayOption? = otherDay_field == nil ? nil : Optional.decodeJson({ OtherDayOption.decodeJson($0) }, otherDay_field!)

    let postOffice_field: AnyObject? = dict["postOffice"]
    let postOffice: PostOfficeOption? = postOffice_field == nil ? nil : Optional.decodeJson({ PostOfficeOption.decodeJson($0) }, postOffice_field!)

    let packStation_field: AnyObject? = dict["packStation"]
    let packStation: PackStationOption? = packStation_field == nil ? nil : Optional.decodeJson({ PackStationOption.decodeJson($0) }, packStation_field!)

    let handoutLocation_field: AnyObject? = dict["handoutLocation"]
    let handoutLocation: HandoutLocationOption? = handoutLocation_field == nil ? nil : Optional.decodeJson({ HandoutLocationOption.decodeJson($0) }, handoutLocation_field!)

    return AvailableOptionsJson(otherDay: otherDay, postOffice: postOffice, packStation: packStation, handoutLocation: handoutLocation)
  }

  func encodeJson() -> AnyObject {
    var dict: [String: AnyObject] = [:]

    dict["otherDay"] = otherDay.encodeJson({ $0.encodeJson() })
    dict["postOffice"] = postOffice.encodeJson({ $0.encodeJson() })
    dict["packStation"] = packStation.encodeJson({ $0.encodeJson() })
    dict["handoutLocation"] = handoutLocation.encodeJson({ $0.encodeJson() })

    return dict
  }
}

extension OtherDayOption {
  static func decodeJson(json: AnyObject) -> OtherDayOption? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary");
      return nil
    }

    guard let timeTable_field: AnyObject? = dict["timeTable"] else {
      assertionFailure("field 'timeTable' is missing")
      return nil
    }
    guard let timeTable: [DayOption] = Array.decodeJson({ DayOption.decodeJson($0) }, timeTable_field!) else {
      assertionFailure("field 'timeTable' is not a [DayOption]")
      return nil
    }

    return OtherDayOption(timeTable: timeTable)
  }

  func encodeJson() -> AnyObject {
    var dict: [String: AnyObject] = [:]

    dict["timeTable"] = timeTable.encodeJson({ $0.encodeJson() })

    return dict
  }
}

extension DayOption {
  static func decodeJson(json: AnyObject) -> DayOption? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary");
      return nil
    }

    guard let date_field: AnyObject? = dict["date"] else {
      assertionFailure("field 'date' is missing")
      return nil
    }
    guard let date: String = String.decodeJson(date_field!) else {
      assertionFailure("field 'date' is not a String")
      return nil
    }

    guard let standard_field: AnyObject? = dict["standard"] else {
      assertionFailure("field 'standard' is missing")
      return nil
    }
    guard let standard: TimeFrameOption = TimeFrameOption.decodeJson(standard_field!) else {
      assertionFailure("field 'standard' is not a TimeFrameOption")
      return nil
    }

    let evening_field: AnyObject? = dict["evening"]
    let evening: TimeFrameOption? = evening_field == nil ? nil : Optional.decodeJson({ TimeFrameOption.decodeJson($0) }, evening_field!)

    return DayOption(date: date, standard: standard, evening: evening)
  }

  func encodeJson() -> AnyObject {
    var dict: [String: AnyObject] = [:]

    dict["date"] = date.encodeJson()
    dict["standard"] = standard.encodeJson()
    dict["evening"] = evening.encodeJson({ $0.encodeJson() })

    return dict
  }
}

extension TimeFrameOption {
  static func decodeJson(json: AnyObject) -> TimeFrameOption? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary");
      return nil
    }

    guard let from_field: AnyObject? = dict["from"] else {
      assertionFailure("field 'from' is missing")
      return nil
    }
    guard let from: NSDate = NSDate.decodeJson(from_field!) else {
      assertionFailure("field 'from' is not a NSDate")
      return nil
    }

    guard let to_field: AnyObject? = dict["to"] else {
      assertionFailure("field 'to' is missing")
      return nil
    }
    guard let to: NSDate = NSDate.decodeJson(to_field!) else {
      assertionFailure("field 'to' is not a NSDate")
      return nil
    }

    guard let costs_field: AnyObject? = dict["costs"] else {
      assertionFailure("field 'costs' is missing")
      return nil
    }
    guard let costs: Int = Int.decodeJson(costs_field!) else {
      assertionFailure("field 'costs' is not a Int")
      return nil
    }

    let sponsorName_field: AnyObject? = dict["sponsorName"]
    let sponsorName: String? = sponsorName_field == nil ? nil : Optional.decodeJson({ String.decodeJson($0) }, sponsorName_field!)

    return TimeFrameOption(from: from, to: to, costs: costs, sponsorName: sponsorName)
  }

  func encodeJson() -> AnyObject {
    var dict: [String: AnyObject] = [:]

    dict["from"] = from.encodeJson()
    dict["to"] = to.encodeJson()
    dict["costs"] = costs.encodeJson()
    dict["sponsorName"] = sponsorName.encodeJson({ $0.encodeJson() })

    return dict
  }
}

extension PostOfficeOption {
  static func decodeJson(json: AnyObject) -> PostOfficeOption? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary");
      return nil
    }

    guard let earlyPickup_field: AnyObject? = dict["earlyPickup"] else {
      assertionFailure("field 'earlyPickup' is missing")
      return nil
    }
    guard let earlyPickup: Costs = Costs.decodeJson(earlyPickup_field!) else {
      assertionFailure("field 'earlyPickup' is not a Costs")
      return nil
    }

    guard let standard_field: AnyObject? = dict["standard"] else {
      assertionFailure("field 'standard' is missing")
      return nil
    }
    guard let standard: Costs = Costs.decodeJson(standard_field!) else {
      assertionFailure("field 'standard' is not a Costs")
      return nil
    }

    return PostOfficeOption(earlyPickup: earlyPickup, standard: standard)
  }

  func encodeJson() -> AnyObject {
    var dict: [String: AnyObject] = [:]

    dict["earlyPickup"] = earlyPickup.encodeJson()
    dict["standard"] = standard.encodeJson()

    return dict
  }
}

extension PackStationOption {
  static func decodeJson(json: AnyObject) -> PackStationOption? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary");
      return nil
    }

    guard let standard_field: AnyObject? = dict["standard"] else {
      assertionFailure("field 'standard' is missing")
      return nil
    }
    guard let standard: Costs = Costs.decodeJson(standard_field!) else {
      assertionFailure("field 'standard' is not a Costs")
      return nil
    }

    return PackStationOption(standard: standard)
  }

  func encodeJson() -> AnyObject {
    var dict: [String: AnyObject] = [:]

    dict["standard"] = standard.encodeJson()

    return dict
  }
}

extension HandoutLocationOption {
  static func decodeJson(json: AnyObject) -> HandoutLocationOption? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary");
      return nil
    }

    guard let standard_field: AnyObject? = dict["standard"] else {
      assertionFailure("field 'standard' is missing")
      return nil
    }
    guard let standard: Costs = Costs.decodeJson(standard_field!) else {
      assertionFailure("field 'standard' is not a Costs")
      return nil
    }

    guard let details_field: AnyObject? = dict["details"] else {
      assertionFailure("field 'details' is missing")
      return nil
    }
    guard let details: Location = Location.decodeJson(details_field!) else {
      assertionFailure("field 'details' is not a Location")
      return nil
    }

    return HandoutLocationOption(standard: standard, details: details)
  }

  func encodeJson() -> AnyObject {
    var dict: [String: AnyObject] = [:]

    dict["standard"] = standard.encodeJson()
    dict["details"] = details.encodeJson()

    return dict
  }
}

extension Costs {
  static func decodeJson(json: AnyObject) -> Costs? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary");
      return nil
    }

    guard let available_field: AnyObject? = dict["available"] else {
      assertionFailure("field 'available' is missing")
      return nil
    }
    guard let available: Bool = Bool.decodeJson(available_field!) else {
      assertionFailure("field 'available' is not a Bool")
      return nil
    }

    guard let costs_field: AnyObject? = dict["costs"] else {
      assertionFailure("field 'costs' is missing")
      return nil
    }
    guard let costs: Int = Int.decodeJson(costs_field!) else {
      assertionFailure("field 'costs' is not a Int")
      return nil
    }

    let sponsorName_field: AnyObject? = dict["sponsorName"]
    let sponsorName: String? = sponsorName_field == nil ? nil : Optional.decodeJson({ String.decodeJson($0) }, sponsorName_field!)

    return Costs(available: available, costs: costs, sponsorName: sponsorName)
  }

  func encodeJson() -> AnyObject {
    var dict: [String: AnyObject] = [:]

    dict["available"] = available.encodeJson()
    dict["costs"] = costs.encodeJson()
    dict["sponsorName"] = sponsorName.encodeJson({ $0.encodeJson() })

    return dict
  }
}
