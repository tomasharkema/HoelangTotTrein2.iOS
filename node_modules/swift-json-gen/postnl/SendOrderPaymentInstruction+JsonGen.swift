//
//  SendOrderPaymentInstruction+JsonGen.swift
//
//  Auto generated by swift-json-gen on Thu, 06 Aug 2015 13:12:53 GMT
//

import Foundation

extension SendOrderPaymentInstruction {
  static func decodeJson(json: AnyObject) -> SendOrderPaymentInstruction? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary");
      return nil
    }

    guard let order_field: AnyObject? = dict["order"] else {
      assertionFailure("field 'order' is missing")
      return nil
    }
    guard let order: SendOrder = SendOrder.decodeJson(order_field!) else {
      assertionFailure("field 'order' is not a SendOrder")
      return nil
    }

    guard let redirectUrl_field: AnyObject? = dict["redirectUrl"] else {
      assertionFailure("field 'redirectUrl' is missing")
      return nil
    }
    guard let redirectUrl: NSURL = NSURL.decodeJson(redirectUrl_field!) else {
      assertionFailure("field 'redirectUrl' is not a NSURL")
      return nil
    }

    guard let paymentProviders_field: AnyObject? = dict["paymentProviders"] else {
      assertionFailure("field 'paymentProviders' is missing")
      return nil
    }
    guard let paymentProviders: [PaymentProvider] = Array.decodeJson({ PaymentProvider.decodeJson($0) }, paymentProviders_field!) else {
      assertionFailure("field 'paymentProviders' is not a [PaymentProvider]")
      return nil
    }

    return SendOrderPaymentInstruction(order: order, redirectUrl: redirectUrl, paymentProviders: paymentProviders)
  }

  func encodeJson() -> AnyObject {
    var dict: [String: AnyObject] = [:]

    dict["order"] = order.encodeJson()
    dict["redirectUrl"] = redirectUrl.encodeJson()
    dict["paymentProviders"] = paymentProviders.encodeJson({ $0.encodeJson() })

    return dict
  }
}
