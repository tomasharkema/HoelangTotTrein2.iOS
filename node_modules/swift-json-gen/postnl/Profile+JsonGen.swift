//
//  Profile+JsonGen.swift
//
//  Auto generated by swift-json-gen on Thu, 06 Aug 2015 13:12:53 GMT
//

import Foundation

extension Profile {
  static func decodeJson(json: AnyObject) -> Profile? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary");
      return nil
    }

    guard let email_field: AnyObject? = dict["email"] else {
      assertionFailure("field 'email' is missing")
      return nil
    }
    guard let email: String = String.decodeJson(email_field!) else {
      assertionFailure("field 'email' is not a String")
      return nil
    }

    let firstName_field: AnyObject? = dict["firstName"]
    let firstName: String? = firstName_field == nil ? nil : Optional.decodeJson({ String.decodeJson($0) }, firstName_field!)

    let middleName_field: AnyObject? = dict["middleName"]
    let middleName: String? = middleName_field == nil ? nil : Optional.decodeJson({ String.decodeJson($0) }, middleName_field!)

    let lastName_field: AnyObject? = dict["lastName"]
    let lastName: String? = lastName_field == nil ? nil : Optional.decodeJson({ String.decodeJson($0) }, lastName_field!)

    guard let primaryAddress_field: AnyObject? = dict["primaryAddress"] else {
      assertionFailure("field 'primaryAddress' is missing")
      return nil
    }
    guard let primaryAddress: ProfileAddress = ProfileAddress.decodeJson(primaryAddress_field!) else {
      assertionFailure("field 'primaryAddress' is not a ProfileAddress")
      return nil
    }

    let phoneNumber_field: AnyObject? = dict["phoneNumber"]
    let phoneNumber: String? = phoneNumber_field == nil ? nil : Optional.decodeJson({ String.decodeJson($0) }, phoneNumber_field!)

    return Profile(email: email, firstName: firstName, middleName: middleName, lastName: lastName, primaryAddress: primaryAddress, phoneNumber: phoneNumber)
  }

  func encodeJson() -> AnyObject {
    var dict: [String: AnyObject] = [:]

    dict["email"] = email.encodeJson()
    dict["firstName"] = firstName.encodeJson({ $0.encodeJson() })
    dict["middleName"] = middleName.encodeJson({ $0.encodeJson() })
    dict["lastName"] = lastName.encodeJson({ $0.encodeJson() })
    dict["primaryAddress"] = primaryAddress.encodeJson()
    dict["phoneNumber"] = phoneNumber.encodeJson({ $0.encodeJson() })

    return dict
  }
}

extension ProfileAddress {
  static func decodeJson(json: AnyObject) -> ProfileAddress? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary");
      return nil
    }

    guard let street_field: AnyObject? = dict["street"] else {
      assertionFailure("field 'street' is missing")
      return nil
    }
    guard let street: String = String.decodeJson(street_field!) else {
      assertionFailure("field 'street' is not a String")
      return nil
    }

    guard let houseNumber_field: AnyObject? = dict["houseNumber"] else {
      assertionFailure("field 'houseNumber' is missing")
      return nil
    }
    guard let houseNumber: String = String.decodeJson(houseNumber_field!) else {
      assertionFailure("field 'houseNumber' is not a String")
      return nil
    }

    let houseNumberSuffix_field: AnyObject? = dict["houseNumberSuffix"]
    let houseNumberSuffix: String? = houseNumberSuffix_field == nil ? nil : Optional.decodeJson({ String.decodeJson($0) }, houseNumberSuffix_field!)

    guard let postalCode_field: AnyObject? = dict["postalCode"] else {
      assertionFailure("field 'postalCode' is missing")
      return nil
    }
    guard let postalCode: String = String.decodeJson(postalCode_field!) else {
      assertionFailure("field 'postalCode' is not a String")
      return nil
    }

    guard let town_field: AnyObject? = dict["town"] else {
      assertionFailure("field 'town' is missing")
      return nil
    }
    guard let town: String = String.decodeJson(town_field!) else {
      assertionFailure("field 'town' is not a String")
      return nil
    }

    guard let country_field: AnyObject? = dict["country"] else {
      assertionFailure("field 'country' is missing")
      return nil
    }
    guard let country: String = String.decodeJson(country_field!) else {
      assertionFailure("field 'country' is not a String")
      return nil
    }

    return ProfileAddress(street: street, houseNumber: houseNumber, houseNumberSuffix: houseNumberSuffix, postalCode: postalCode, town: town, country: country)
  }

  func encodeJson() -> AnyObject {
    var dict: [String: AnyObject] = [:]

    dict["street"] = street.encodeJson()
    dict["houseNumber"] = houseNumber.encodeJson()
    dict["houseNumberSuffix"] = houseNumberSuffix.encodeJson({ $0.encodeJson() })
    dict["postalCode"] = postalCode.encodeJson()
    dict["town"] = town.encodeJson()
    dict["country"] = country.encodeJson()

    return dict
  }
}
