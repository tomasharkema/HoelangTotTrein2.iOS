//
//  Advice+JsonGen.swift
//
//  Auto generated by swift-json-gen on Sun, 27 Sep 2015 18:59:49 GMT
//  See for details: https://github.com/tomlokhorst/swift-json-gen
//

import Foundation

extension FareStatus {
  static func decodeJson(json: AnyObject) -> FareStatus? {
    if let value = json as? String {
      return FareStatus(rawValue: value)
    }
    return nil
  }

  func encodeJson() -> String {
    return rawValue
  }
}

extension FareTime {
  static func decodeJson(json: AnyObject) -> FareTime? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary")
      return nil
    }

    guard let planned_field: AnyObject = dict["planned"] else {
      assertionFailure("field 'planned' is missing")
      return nil
    }
    guard let planned: Double = Double.decodeJson(planned_field) else {
      assertionFailure("field 'planned' is not a Double")
      return nil
    }

    guard let actual_field: AnyObject = dict["actual"] else {
      assertionFailure("field 'actual' is missing")
      return nil
    }
    guard let actual: Double = Double.decodeJson(actual_field) else {
      assertionFailure("field 'actual' is not a Double")
      return nil
    }

    return FareTime(planned: planned, actual: actual)
  }

  func encodeJson() -> [String: AnyObject] {
    var dict: [String: AnyObject] = [:]

    dict["planned"] = planned.encodeJson()
    dict["actual"] = actual.encodeJson()

    return dict
  }
}

extension Melding {
  static func decodeJson(json: AnyObject) -> Melding? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary")
      return nil
    }

    guard let id_field: AnyObject = dict["id"] else {
      assertionFailure("field 'id' is missing")
      return nil
    }
    guard let id: String = String.decodeJson(id_field) else {
      assertionFailure("field 'id' is not a String")
      return nil
    }

    guard let ernstig_field: AnyObject = dict["ernstig"] else {
      assertionFailure("field 'ernstig' is missing")
      return nil
    }
    guard let ernstig: Bool = Bool.decodeJson(ernstig_field) else {
      assertionFailure("field 'ernstig' is not a Bool")
      return nil
    }

    guard let text_field: AnyObject = dict["text"] else {
      assertionFailure("field 'text' is missing")
      return nil
    }
    guard let text: String = String.decodeJson(text_field) else {
      assertionFailure("field 'text' is not a String")
      return nil
    }

    return Melding(id: id, ernstig: ernstig, text: text)
  }

  func encodeJson() -> [String: AnyObject] {
    var dict: [String: AnyObject] = [:]

    dict["id"] = id.encodeJson()
    dict["ernstig"] = ernstig.encodeJson()
    dict["text"] = text.encodeJson()

    return dict
  }
}

extension Stop {
  static func decodeJson(json: AnyObject) -> Stop? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary")
      return nil
    }

    guard let time_field: AnyObject = dict["time"] else {
      assertionFailure("field 'time' is missing")
      return nil
    }
    guard let time: Double = Double.decodeJson(time_field) else {
      assertionFailure("field 'time' is not a Double")
      return nil
    }

    let spoor_field: AnyObject? = dict["spoor"]
    let spoor: String? = spoor_field == nil || spoor_field! is NSNull ? nil : Optional.decodeJson({ String.decodeJson($0) }, spoor_field!)

    guard let name_field: AnyObject = dict["name"] else {
      assertionFailure("field 'name' is missing")
      return nil
    }
    guard let name: String = String.decodeJson(name_field) else {
      assertionFailure("field 'name' is not a String")
      return nil
    }

    return Stop(time: time, spoor: spoor, name: name)
  }

  func encodeJson() -> [String: AnyObject] {
    var dict: [String: AnyObject] = [:]

    dict["time"] = time.encodeJson()
    dict["spoor"] = spoor.encodeJson({ $0.encodeJson() })
    dict["name"] = name.encodeJson()

    return dict
  }
}

extension ReisDeel {
  static func decodeJson(json: AnyObject) -> ReisDeel? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary")
      return nil
    }

    guard let vervoerder_field: AnyObject = dict["vervoerder"] else {
      assertionFailure("field 'vervoerder' is missing")
      return nil
    }
    guard let vervoerder: String = String.decodeJson(vervoerder_field) else {
      assertionFailure("field 'vervoerder' is not a String")
      return nil
    }

    guard let vervoerType_field: AnyObject = dict["vervoerType"] else {
      assertionFailure("field 'vervoerType' is missing")
      return nil
    }
    guard let vervoerType: String = String.decodeJson(vervoerType_field) else {
      assertionFailure("field 'vervoerType' is not a String")
      return nil
    }

    guard let stops_field: AnyObject = dict["stops"] else {
      assertionFailure("field 'stops' is missing")
      return nil
    }
    guard let stops: [Stop] = Array.decodeJson({ Stop.decodeJson($0) }, stops_field) else {
      assertionFailure("field 'stops' is not a [Stop]")
      return nil
    }

    return ReisDeel(vervoerder: vervoerder, vervoerType: vervoerType, stops: stops)
  }

  func encodeJson() -> [String: AnyObject] {
    var dict: [String: AnyObject] = [:]

    dict["vervoerder"] = vervoerder.encodeJson()
    dict["vervoerType"] = vervoerType.encodeJson()
    dict["stops"] = stops.encodeJson({ $0.encodeJson() })

    return dict
  }
}

extension Advice {
  static func decodeJson(json: AnyObject) -> Advice? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary")
      return nil
    }

    guard let overstappen_field: AnyObject = dict["overstappen"] else {
      assertionFailure("field 'overstappen' is missing")
      return nil
    }
    guard let overstappen: Int = Int.decodeJson(overstappen_field) else {
      assertionFailure("field 'overstappen' is not a Int")
      return nil
    }

    guard let vertrek_field: AnyObject = dict["vertrek"] else {
      assertionFailure("field 'vertrek' is missing")
      return nil
    }
    guard let vertrek: FareTime = FareTime.decodeJson(vertrek_field) else {
      assertionFailure("field 'vertrek' is not a FareTime")
      return nil
    }

    let melding_field: AnyObject? = dict["melding"]
    let melding: Melding? = melding_field == nil || melding_field! is NSNull ? nil : Optional.decodeJson({ Melding.decodeJson($0) }, melding_field!)

    guard let reisDeel_field: AnyObject = dict["reisDeel"] else {
      assertionFailure("field 'reisDeel' is missing")
      return nil
    }
    guard let reisDeel: [ReisDeel] = Array.decodeJson({ ReisDeel.decodeJson($0) }, reisDeel_field) else {
      assertionFailure("field 'reisDeel' is not a [ReisDeel]")
      return nil
    }

    let vertrekVertraging_field: AnyObject? = dict["vertrekVertraging"]
    let vertrekVertraging: String? = vertrekVertraging_field == nil || vertrekVertraging_field! is NSNull ? nil : Optional.decodeJson({ String.decodeJson($0) }, vertrekVertraging_field!)

    guard let status_field: AnyObject = dict["status"] else {
      assertionFailure("field 'status' is missing")
      return nil
    }
    guard let status: String = String.decodeJson(status_field) else {
      assertionFailure("field 'status' is not a String")
      return nil
    }

    return Advice(overstappen: overstappen, vertrek: vertrek, melding: melding, reisDeel: reisDeel, vertrekVertraging: vertrekVertraging, status: status)
  }

  func encodeJson() -> [String: AnyObject] {
    var dict: [String: AnyObject] = [:]

    dict["overstappen"] = overstappen.encodeJson()
    dict["vertrek"] = vertrek.encodeJson()
    dict["melding"] = melding.encodeJson({ $0.encodeJson() })
    dict["reisDeel"] = reisDeel.encodeJson({ $0.encodeJson() })
    dict["vertrekVertraging"] = vertrekVertraging.encodeJson({ $0.encodeJson() })
    dict["status"] = status.encodeJson()

    return dict
  }
}

extension AdvicesResult {
  static func decodeJson(json: AnyObject) -> AdvicesResult? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary")
      return nil
    }

    guard let advices_field: AnyObject = dict["advices"] else {
      assertionFailure("field 'advices' is missing")
      return nil
    }
    guard let advices: [Advice] = Array.decodeJson({ Advice.decodeJson($0) }, advices_field) else {
      assertionFailure("field 'advices' is not a [Advice]")
      return nil
    }

    return AdvicesResult(advices: advices)
  }

  func encodeJson() -> [String: AnyObject] {
    var dict: [String: AnyObject] = [:]

    dict["advices"] = advices.encodeJson({ $0.encodeJson() })

    return dict
  }
}
