//
//  Station+JsonGen.swift
//
//  Auto generated by swift-json-gen on Sun, 27 Sep 2015 15:07:57 GMT
//  See for details: https://github.com/tomlokhorst/swift-json-gen
//

import Foundation

extension Coords {
  static func decodeJson(json: AnyObject) -> Coords? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary")
      return nil
    }

    guard let lat_field: AnyObject = dict["lat"] else {
      assertionFailure("field 'lat' is missing")
      return nil
    }
    guard let lat: Double = Double.decodeJson(lat_field) else {
      assertionFailure("field 'lat' is not a Double")
      return nil
    }

    guard let lon_field: AnyObject = dict["lon"] else {
      assertionFailure("field 'lon' is missing")
      return nil
    }
    guard let lon: Double = Double.decodeJson(lon_field) else {
      assertionFailure("field 'lon' is not a Double")
      return nil
    }

    return Coords(lat: lat, lon: lon)
  }

  func encodeJson() -> [String: AnyObject] {
    var dict: [String: AnyObject] = [:]

    dict["lat"] = lat.encodeJson()
    dict["lon"] = lon.encodeJson()

    return dict
  }
}

extension Station {
  static func decodeJson(json: AnyObject) -> Station? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary")
      return nil
    }

    guard let name_field: AnyObject = dict["name"] else {
      assertionFailure("field 'name' is missing")
      return nil
    }
    guard let name: String = String.decodeJson(name_field) else {
      assertionFailure("field 'name' is not a String")
      return nil
    }

    guard let code_field: AnyObject = dict["code"] else {
      assertionFailure("field 'code' is missing")
      return nil
    }
    guard let code: String = String.decodeJson(code_field) else {
      assertionFailure("field 'code' is not a String")
      return nil
    }

    guard let land_field: AnyObject = dict["land"] else {
      assertionFailure("field 'land' is missing")
      return nil
    }
    guard let land: String = String.decodeJson(land_field) else {
      assertionFailure("field 'land' is not a String")
      return nil
    }

    guard let coords_field: AnyObject = dict["coords"] else {
      assertionFailure("field 'coords' is missing")
      return nil
    }
    guard let coords: Coords = Coords.decodeJson(coords_field) else {
      assertionFailure("field 'coords' is not a Coords")
      return nil
    }

    return Station(name: name, code: code, land: land, coords: coords)
  }

  func encodeJson() -> [String: AnyObject] {
    var dict: [String: AnyObject] = [:]

    dict["name"] = name.encodeJson()
    dict["code"] = code.encodeJson()
    dict["land"] = land.encodeJson()
    dict["coords"] = coords.encodeJson()

    return dict
  }
}

extension StationsResponse {
  static func decodeJson(json: AnyObject) -> StationsResponse? {
    guard let dict = json as? [String : AnyObject] else {
      assertionFailure("json not a dictionary")
      return nil
    }

    guard let stations_field: AnyObject = dict["stations"] else {
      assertionFailure("field 'stations' is missing")
      return nil
    }
    guard let stations: [Station] = Array.decodeJson({ Station.decodeJson($0) }, stations_field) else {
      assertionFailure("field 'stations' is not a [Station]")
      return nil
    }

    return StationsResponse(stations: stations)
  }

  func encodeJson() -> [String: AnyObject] {
    var dict: [String: AnyObject] = [:]

    dict["stations"] = stations.encodeJson({ $0.encodeJson() })

    return dict
  }
}
