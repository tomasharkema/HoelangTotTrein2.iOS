//
//  Station+JsonGen.swift
//
//  Auto generated by swift-json-gen on Sat, 01 Apr 2017 21:22:31 GMT
//  See for details: https://github.com/tomlokhorst/swift-json-gen
//

import Foundation
import Statham

extension StationType {
  static func decodeJson(_ json: Any) throws -> StationType {
    guard let rawValue = json as? String else {
      throw JsonDecodeError.wrongType(rawValue: json, expectedType: "String")
    }
    guard let value = StationType(rawValue: rawValue) else {
      throw JsonDecodeError.wrongEnumRawValue(rawValue: rawValue, enumType: "StationType")
    }

    return value
  }

  func encodeJson() -> String {
    return rawValue
  }
}

extension Coords {
  static func decodeJson(_ json: Any) throws -> Coords {
    let decoder = try JsonDecoder(json: json)

    let _lat = try decoder.decode("lat", decoder: Double.decodeJson)
    let _lon = try decoder.decode("lon", decoder: Double.decodeJson)

    guard
      let lat = _lat,
      let lon = _lon
    else {
      throw JsonDecodeError.structErrors(type: "Coords", errors: decoder.errors)
    }

    return Coords(lat: lat, lon: lon)
  }

  func encodeJson() -> [String: Any] {
    var dict: [String: Any] = [:]

    dict["lat"] = lat.encodeJson()
    dict["lon"] = lon.encodeJson()

    return dict
  }
}

extension Station {
  static func decodeJson(_ json: Any) throws -> Station {
    let decoder = try JsonDecoder(json: json)

    let _name = try decoder.decode("name", decoder: String.decodeJson)
    let _code = try decoder.decode("code", decoder: String.decodeJson)
    let _land = try decoder.decode("land", decoder: String.decodeJson)
    let _coords = try decoder.decode("coords", decoder: Coords.decodeJson)
    let _type = try decoder.decode("type", decoder: Optional.decodeJson(StationType.decodeJson))

    guard
      let name = _name,
      let code = _code,
      let land = _land,
      let coords = _coords,
      let type = _type
    else {
      throw JsonDecodeError.structErrors(type: "Station", errors: decoder.errors)
    }

    return Station(name: name, code: code, land: land, coords: coords, type: type)
  }

  func encodeJson() -> [String: Any] {
    var dict: [String: Any] = [:]

    dict["name"] = name.encodeJson()
    dict["code"] = code.encodeJson()
    dict["land"] = land.encodeJson()
    dict["coords"] = coords.encodeJson()
    dict["type"] = type.encodeJson({ $0.encodeJson() })

    return dict
  }
}

extension StationsResponse {
  static func decodeJson(_ json: Any) throws -> StationsResponse {
    let decoder = try JsonDecoder(json: json)

    let _stations = try decoder.decode("stations", decoder: Array.decodeJson(Station.decodeJson))

    guard let stations = _stations else {
      throw JsonDecodeError.structErrors(type: "StationsResponse", errors: decoder.errors)
    }

    return StationsResponse(stations: stations)
  }

  func encodeJson() -> [String: Any] {
    var dict: [String: Any] = [:]

    dict["stations"] = stations.encodeJson({ $0.encodeJson() })

    return dict
  }
}
