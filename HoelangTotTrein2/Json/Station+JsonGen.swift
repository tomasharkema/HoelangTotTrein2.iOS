//
//  Station+JsonGen.swift
//
//  Auto generated by swift-json-gen on Sat, 23 Jan 2016 12:31:24 GMT
//  See for details: https://github.com/tomlokhorst/swift-json-gen
//

import Foundation

extension Coords {
  static func decodeJson(json: AnyObject) throws -> Coords {
    guard let dict = json as? [String : AnyObject] else {
      throw JsonDecodeError.WrongType(rawValue: json, expectedType: "Object")
    }

    var errors: [String: JsonDecodeError] = [:]

    var lat_optional: Double?
    var lon_optional: Double?

    if let lat_field: AnyObject = dict["lat"] {
      do {
        lat_optional = try Double.decodeJson(lat_field)
      }
      catch let error as JsonDecodeError {
        errors["lat"] = error
      }
    }
    else {
      errors["lat"] = JsonDecodeError.MissingField
    }

    if let lon_field: AnyObject = dict["lon"] {
      do {
        lon_optional = try Double.decodeJson(lon_field)
      }
      catch let error as JsonDecodeError {
        errors["lon"] = error
      }
    }
    else {
      errors["lon"] = JsonDecodeError.MissingField
    }

    guard
      let lat = lat_optional,
      let lon = lon_optional
    else {
      throw JsonDecodeError.StructErrors(type: "Coords", errors: errors)
    }

    return Coords(lat: lat, lon: lon)
  }

  func encodeJson() -> [String: AnyObject] {
    var dict: [String: AnyObject] = [:]

    dict["lat"] = lat.encodeJson()
    dict["lon"] = lon.encodeJson()

    return dict
  }
}

extension Station {
  static func decodeJson(json: AnyObject) throws -> Station {
    guard let dict = json as? [String : AnyObject] else {
      throw JsonDecodeError.WrongType(rawValue: json, expectedType: "Object")
    }

    var errors: [String: JsonDecodeError] = [:]

    var name_optional: String?
    var code_optional: String?
    var land_optional: String?
    var coords_optional: Coords?

    if let name_field: AnyObject = dict["name"] {
      do {
        name_optional = try String.decodeJson(name_field)
      }
      catch let error as JsonDecodeError {
        errors["name"] = error
      }
    }
    else {
      errors["name"] = JsonDecodeError.MissingField
    }

    if let code_field: AnyObject = dict["code"] {
      do {
        code_optional = try String.decodeJson(code_field)
      }
      catch let error as JsonDecodeError {
        errors["code"] = error
      }
    }
    else {
      errors["code"] = JsonDecodeError.MissingField
    }

    if let land_field: AnyObject = dict["land"] {
      do {
        land_optional = try String.decodeJson(land_field)
      }
      catch let error as JsonDecodeError {
        errors["land"] = error
      }
    }
    else {
      errors["land"] = JsonDecodeError.MissingField
    }

    if let coords_field: AnyObject = dict["coords"] {
      do {
        coords_optional = try Coords.decodeJson(coords_field)
      }
      catch let error as JsonDecodeError {
        errors["coords"] = error
      }
    }
    else {
      errors["coords"] = JsonDecodeError.MissingField
    }

    guard
      let name = name_optional,
      let code = code_optional,
      let land = land_optional,
      let coords = coords_optional
    else {
      throw JsonDecodeError.StructErrors(type: "Station", errors: errors)
    }

    return Station(name: name, code: code, land: land, coords: coords)
  }

  func encodeJson() -> [String: AnyObject] {
    var dict: [String: AnyObject] = [:]

    dict["name"] = name.encodeJson()
    dict["code"] = code.encodeJson()
    dict["land"] = land.encodeJson()
    dict["coords"] = coords.encodeJson()

    return dict
  }
}

extension StationsResponse {
  static func decodeJson(json: AnyObject) throws -> StationsResponse {
    guard let dict = json as? [String : AnyObject] else {
      throw JsonDecodeError.WrongType(rawValue: json, expectedType: "Object")
    }

    var errors: [String: JsonDecodeError] = [:]

    var stations_optional: [Station]?

    if let stations_field: AnyObject = dict["stations"] {
      do {
        stations_optional = try Array.decodeJson({ try Station.decodeJson($0) }, stations_field)
      }
      catch let error as JsonDecodeError {
        errors["stations"] = error
      }
    }
    else {
      errors["stations"] = JsonDecodeError.MissingField
    }

    guard
      let stations = stations_optional
    else {
      throw JsonDecodeError.StructErrors(type: "StationsResponse", errors: errors)
    }

    return StationsResponse(stations: stations)
  }

  func encodeJson() -> [String: AnyObject] {
    var dict: [String: AnyObject] = [:]

    dict["stations"] = stations.encodeJson({ $0.encodeJson() })

    return dict
  }
}
