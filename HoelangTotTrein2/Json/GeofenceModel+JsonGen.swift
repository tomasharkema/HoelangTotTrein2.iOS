//
//  GeofenceModel+JsonGen.swift
//
//  Auto generated by swift-json-gen on Sat, 12 Mar 2016 12:28:06 GMT
//  See for details: https://github.com/tomlokhorst/swift-json-gen
//

import Foundation

extension GeofenceType {
  static func decodeJson(json: AnyObject) throws -> GeofenceType {
    guard let rawValue = json as? String else {
      throw JsonDecodeError.WrongType(rawValue: json, expectedType: "String")
    }
    guard let value = GeofenceType(rawValue: rawValue) else {
      throw JsonDecodeError.WrongEnumRawValue(rawValue: rawValue, enumType: "GeofenceType")
    }

    return value
  }

  func encodeJson() -> String {
    return rawValue
  }
}

extension GeofenceModel {
  static func decodeJson(json: AnyObject) throws -> GeofenceModel {
    guard let dict = json as? [String : AnyObject] else {
      throw JsonDecodeError.WrongType(rawValue: json, expectedType: "Object")
    }

    var errors: [String: JsonDecodeError] = [:]

    var type_optional: GeofenceType?
    var stationName_optional: String?
    var fromStop_optional: Stop??
    var toStop_optional: Stop??

    if let type_field: AnyObject = dict["type"] {
      do {
        type_optional = try GeofenceType.decodeJson(type_field)
      }
      catch let error as JsonDecodeError {
        errors["type"] = error
      }
    }
    else {
      errors["type"] = JsonDecodeError.MissingField
    }

    if let stationName_field: AnyObject = dict["stationName"] {
      do {
        stationName_optional = try String.decodeJson(stationName_field)
      }
      catch let error as JsonDecodeError {
        errors["stationName"] = error
      }
    }
    else {
      errors["stationName"] = JsonDecodeError.MissingField
    }

    let fromStop_field: AnyObject? = dict["fromStop"]
    if let fromStop_field = fromStop_field where !(fromStop_field is NSNull) {
      do {
        fromStop_optional = try Optional.decodeJson({ try Stop.decodeJson($0) }, fromStop_field)
      }
      catch let error as JsonDecodeError {
        errors["fromStop"] = error
      }
    }
    else {
      fromStop_optional = .Some(nil)
    }

    let toStop_field: AnyObject? = dict["toStop"]
    if let toStop_field = toStop_field where !(toStop_field is NSNull) {
      do {
        toStop_optional = try Optional.decodeJson({ try Stop.decodeJson($0) }, toStop_field)
      }
      catch let error as JsonDecodeError {
        errors["toStop"] = error
      }
    }
    else {
      toStop_optional = .Some(nil)
    }

    guard
      let type = type_optional,
      let stationName = stationName_optional,
      let fromStop = fromStop_optional,
      let toStop = toStop_optional
    else {
      throw JsonDecodeError.StructErrors(type: "GeofenceModel", errors: errors)
    }

    return GeofenceModel(type: type, stationName: stationName, fromStop: fromStop, toStop: toStop)
  }

  func encodeJson() -> [String: AnyObject] {
    var dict: [String: AnyObject] = [:]

    dict["type"] = type.encodeJson()
    dict["stationName"] = stationName.encodeJson()
    dict["fromStop"] = fromStop.encodeJson({ $0.encodeJson() })
    dict["toStop"] = toStop.encodeJson({ $0.encodeJson() })

    return dict
  }
}

extension GeofenceModels {
  static func decodeJson(json: AnyObject) throws -> GeofenceModels {
    guard let dict = json as? [String : AnyObject] else {
      throw JsonDecodeError.WrongType(rawValue: json, expectedType: "Object")
    }

    var errors: [String: JsonDecodeError] = [:]

    var geofenceModels_optional: [GeofenceModel]?

    if let geofenceModels_field: AnyObject = dict["geofenceModels"] {
      do {
        geofenceModels_optional = try Array.decodeJson({ try GeofenceModel.decodeJson($0) }, geofenceModels_field)
      }
      catch let error as JsonDecodeError {
        errors["geofenceModels"] = error
      }
    }
    else {
      errors["geofenceModels"] = JsonDecodeError.MissingField
    }

    guard
      let geofenceModels = geofenceModels_optional
    else {
      throw JsonDecodeError.StructErrors(type: "GeofenceModels", errors: errors)
    }

    return GeofenceModels(geofenceModels: geofenceModels)
  }

  func encodeJson() -> [String: AnyObject] {
    var dict: [String: AnyObject] = [:]

    dict["geofenceModels"] = geofenceModels.encodeJson({ $0.encodeJson() })

    return dict
  }
}
