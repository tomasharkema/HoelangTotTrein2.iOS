//
//  GeofenceModel+JsonGen.swift
//
//  Auto generated by swift-json-gen on Sat, 01 Apr 2017 11:58:31 GMT
//  See for details: https://github.com/tomlokhorst/swift-json-gen
//

import Foundation
import Statham

extension GeofenceType {
  static func decodeJson(_ json: Any) throws -> GeofenceType {
    guard let rawValue = json as? String else {
      throw JsonDecodeError.wrongType(rawValue: json, expectedType: "String")
    }
    guard let value = GeofenceType(rawValue: rawValue) else {
      throw JsonDecodeError.wrongEnumRawValue(rawValue: rawValue, enumType: "GeofenceType")
    }

    return value
  }

  func encodeJson() -> String {
    return rawValue
  }
}

extension GeofenceModel {
  static func decodeJson(_ json: Any) throws -> GeofenceModel {
    let decoder = try JsonDecoder(json: json)

    let _type = try decoder.decode("type", decoder: GeofenceType.decodeJson)
    let _stationName = try decoder.decode("stationName", decoder: String.decodeJson)
    let _fromStop = try decoder.decode("fromStop", decoder: Optional.decodeJson(Stop.decodeJson))
    let _toStop = try decoder.decode("toStop", decoder: Optional.decodeJson(Stop.decodeJson))

    guard
      let type = _type,
      let stationName = _stationName,
      let fromStop = _fromStop,
      let toStop = _toStop
    else {
      throw JsonDecodeError.structErrors(type: "GeofenceModel", errors: decoder.errors)
    }

    return GeofenceModel(type: type, stationName: stationName, fromStop: fromStop, toStop: toStop)
  }

  func encodeJson() -> [String: Any] {
    var dict: [String: Any] = [:]

    dict["type"] = type.encodeJson()
    dict["stationName"] = stationName.encodeJson()
    dict["fromStop"] = fromStop.encodeJson({ $0.encodeJson() })
    dict["toStop"] = toStop.encodeJson({ $0.encodeJson() })

    return dict
  }
}

extension GeofenceModels {
  static func decodeJson(_ json: Any) throws -> GeofenceModels {
    let decoder = try JsonDecoder(json: json)

    let _geofenceModels = try decoder.decode("geofenceModels", decoder: Array.decodeJson(GeofenceModel.decodeJson))

    guard let geofenceModels = _geofenceModels else {
      throw JsonDecodeError.structErrors(type: "GeofenceModels", errors: decoder.errors)
    }

    return GeofenceModels(geofenceModels: geofenceModels)
  }

  func encodeJson() -> [String: Any] {
    var dict: [String: Any] = [:]

    dict["geofenceModels"] = geofenceModels.encodeJson({ $0.encodeJson() })

    return dict
  }
}
