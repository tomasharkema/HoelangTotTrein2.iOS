//
//  ErrorJson+JsonGen.swift
//
//  Auto generated by swift-json-gen on Sat, 01 Apr 2017 11:58:31 GMT
//  See for details: https://github.com/tomlokhorst/swift-json-gen
//

import Foundation
import Statham

extension ServerErrorJson {
  static func decodeJson(_ json: Any) throws -> ServerErrorJson {
    let decoder = try JsonDecoder(json: json)

    let _message = try decoder.decode("message", decoder: Optional.decodeJson(String.decodeJson))
    let _exceptionMessage = try decoder.decode("exceptionMessage", decoder: Optional.decodeJson(String.decodeJson))
    let _exceptionType = try decoder.decode("exceptionType", decoder: Optional.decodeJson(String.decodeJson))
    let _stackTrace = try decoder.decode("stackTrace", decoder: Optional.decodeJson(String.decodeJson))

    guard
      let message = _message,
      let exceptionMessage = _exceptionMessage,
      let exceptionType = _exceptionType,
      let stackTrace = _stackTrace
    else {
      throw JsonDecodeError.structErrors(type: "ServerErrorJson", errors: decoder.errors)
    }

    return ServerErrorJson(message: message, exceptionMessage: exceptionMessage, exceptionType: exceptionType, stackTrace: stackTrace)
  }

  func encodeJson() -> [String: Any] {
    var dict: [String: Any] = [:]

    dict["message"] = message.encodeJson({ $0.encodeJson() })
    dict["exceptionMessage"] = exceptionMessage.encodeJson({ $0.encodeJson() })
    dict["exceptionType"] = exceptionType.encodeJson({ $0.encodeJson() })
    dict["stackTrace"] = stackTrace.encodeJson({ $0.encodeJson() })

    return dict
  }
}
