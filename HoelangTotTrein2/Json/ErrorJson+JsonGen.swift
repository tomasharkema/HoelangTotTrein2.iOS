//
//  ErrorJson+JsonGen.swift
//
//  Auto generated by swift-json-gen on Sat, 23 Jan 2016 12:31:24 GMT
//  See for details: https://github.com/tomlokhorst/swift-json-gen
//

import Foundation

extension ServerErrorJson {
  static func decodeJson(json: AnyObject) throws -> ServerErrorJson {
    guard let dict = json as? [String : AnyObject] else {
      throw JsonDecodeError.WrongType(rawValue: json, expectedType: "Object")
    }

    var errors: [String: JsonDecodeError] = [:]

    var message_optional: String??
    var exceptionMessage_optional: String??
    var exceptionType_optional: String??
    var stackTrace_optional: String??

    let message_field: AnyObject? = dict["message"]
    if let message_field = message_field where !(message_field is NSNull) {
      do {
        message_optional = try Optional.decodeJson({ try String.decodeJson($0) }, message_field)
      }
      catch let error as JsonDecodeError {
        errors["message"] = error
      }
    }
    else {
      message_optional = .Some(nil)
    }

    let exceptionMessage_field: AnyObject? = dict["exceptionMessage"]
    if let exceptionMessage_field = exceptionMessage_field where !(exceptionMessage_field is NSNull) {
      do {
        exceptionMessage_optional = try Optional.decodeJson({ try String.decodeJson($0) }, exceptionMessage_field)
      }
      catch let error as JsonDecodeError {
        errors["exceptionMessage"] = error
      }
    }
    else {
      exceptionMessage_optional = .Some(nil)
    }

    let exceptionType_field: AnyObject? = dict["exceptionType"]
    if let exceptionType_field = exceptionType_field where !(exceptionType_field is NSNull) {
      do {
        exceptionType_optional = try Optional.decodeJson({ try String.decodeJson($0) }, exceptionType_field)
      }
      catch let error as JsonDecodeError {
        errors["exceptionType"] = error
      }
    }
    else {
      exceptionType_optional = .Some(nil)
    }

    let stackTrace_field: AnyObject? = dict["stackTrace"]
    if let stackTrace_field = stackTrace_field where !(stackTrace_field is NSNull) {
      do {
        stackTrace_optional = try Optional.decodeJson({ try String.decodeJson($0) }, stackTrace_field)
      }
      catch let error as JsonDecodeError {
        errors["stackTrace"] = error
      }
    }
    else {
      stackTrace_optional = .Some(nil)
    }

    guard
      let message = message_optional,
      let exceptionMessage = exceptionMessage_optional,
      let exceptionType = exceptionType_optional,
      let stackTrace = stackTrace_optional
    else {
      throw JsonDecodeError.StructErrors(type: "ServerErrorJson", errors: errors)
    }

    return ServerErrorJson(message: message, exceptionMessage: exceptionMessage, exceptionType: exceptionType, stackTrace: stackTrace)
  }

  func encodeJson() -> [String: AnyObject] {
    var dict: [String: AnyObject] = [:]

    dict["message"] = message.encodeJson({ $0.encodeJson() })
    dict["exceptionMessage"] = exceptionMessage.encodeJson({ $0.encodeJson() })
    dict["exceptionType"] = exceptionType.encodeJson({ $0.encodeJson() })
    dict["stackTrace"] = stackTrace.encodeJson({ $0.encodeJson() })

    return dict
  }
}
